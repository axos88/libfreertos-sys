/* automatically generated by rust-bindgen */

pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 0;
pub const configUSE_TICKLESS_IDLE: u32 = 0;
pub const configTICK_RATE_HZ: u32 = 100;
pub const configMAX_PRIORITIES: u32 = 5;
pub const configMINIMAL_STACK_SIZE: u32 = 128;
pub const configMAX_TASK_NAME_LEN: u32 = 16;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 1;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configUSE_MUTEXES: u32 = 0;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 0;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 0;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const configQUEUE_REGISTRY_SIZE: u32 = 10;
pub const configUSE_QUEUE_SETS: u32 = 0;
pub const configUSE_TIME_SLICING: u32 = 0;
pub const configUSE_NEWLIB_REENTRANT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 0;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 5;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 1;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configTOTAL_HEAP_SIZE: u32 = 10240;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 1;
pub const configUSE_IDLE_HOOK: u32 = 0;
pub const configUSE_TICK_HOOK: u32 = 1;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 0;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 1;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const configUSE_TRACE_FACILITY: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 1;
pub const configUSE_TIMERS: u32 = 0;
pub const configTIMER_TASK_PRIORITY: u32 = 3;
pub const configTIMER_QUEUE_LENGTH: u32 = 10;
pub const configTIMER_TASK_STACK_DEPTH: u32 = 128;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const INCLUDE_vTaskPrioritySet: u32 = 1;
pub const INCLUDE_uxTaskPriorityGet: u32 = 1;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_xResumeFromISR: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 1;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 0;
pub const INCLUDE_eTaskGetState: u32 = 0;
pub const INCLUDE_xEventGroupSetBitFromISR: u32 = 1;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 0;
pub const INCLUDE_xTaskAbortDelay: u32 = 0;
pub const INCLUDE_xTaskGetHandle: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 1;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 8;
pub const portNVIC_PENDSVSET_BIT: u32 = 268435456;
pub const portBYTE_ALIGNMENT_MASK: u32 = 7;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 0;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const configASSERT_DEFINED: u32 = 1;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 0;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const tskKERNEL_VERSION_NUMBER: &'static [u8; 8usize] = b"V10.2.0\0";
pub const tskKERNEL_VERSION_MAJOR: u32 = 10;
pub const tskKERNEL_VERSION_MINOR: u32 = 2;
pub const tskKERNEL_VERSION_BUILD: u32 = 0;
pub const tskMPU_REGION_READ_ONLY: u32 = 1;
pub const tskMPU_REGION_READ_WRITE: u32 = 2;
pub const tskMPU_REGION_EXECUTE_NEVER: u32 = 4;
pub const tskMPU_REGION_NORMAL_MEMORY: u32 = 8;
pub const tskMPU_REGION_DEVICE_MEMORY: u32 = 16;
pub type wchar_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: c_types::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = c_types::c_longlong;
pub type uintmax_t = c_types::c_ulonglong;
extern "C" {
    pub static mut SystemCoreClock: u32;
}
pub type TaskFunction_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>;
pub type StackType_t = u32;
pub type BaseType_t = c_types::c_long;
pub type UBaseType_t = c_types::c_ulong;
pub type TickType_t = u32;
extern "C" {
    pub fn vPortYield();
}
extern "C" {
    pub fn vPortEnterCritical();
}
extern "C" {
    pub fn vPortExitCritical();
}
extern "C" {
    pub fn ulSetInterruptMaskFromISR() -> u32;
}
extern "C" {
    pub fn vClearInterruptMaskFromISR(ulMask: u32);
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut c_types::c_void,
    ) -> *mut StackType_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeapRegion {
    pub pucStartAddress: *mut u8,
    pub xSizeInBytes: usize,
}
#[test]
fn bindgen_test_layout_HeapRegion() {
    assert_eq!(
        ::core::mem::size_of::<HeapRegion>(),
        8usize,
        concat!("Size of: ", stringify!(HeapRegion))
    );
    assert_eq!(
        ::core::mem::align_of::<HeapRegion>(),
        4usize,
        concat!("Alignment of ", stringify!(HeapRegion))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<HeapRegion>())).pucStartAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(pucStartAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<HeapRegion>())).xSizeInBytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HeapRegion),
            "::",
            stringify!(xSizeInBytes)
        )
    );
}
pub type HeapRegion_t = HeapRegion;
extern "C" {
    pub fn vPortDefineHeapRegions(pxHeapRegions: *const HeapRegion_t);
}
extern "C" {
    pub fn pvPortMalloc(xSize: usize) -> *mut c_types::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut c_types::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> usize;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> usize;
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut c_types::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_LIST_ITEM>(),
        20usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_LIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST_ITEM>())).pvDummy3 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut c_types::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_xSTATIC_MINI_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_MINI_LIST_ITEM>(),
        12usize,
        concat!("Size of: ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_MINI_LIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_MINI_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).xDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_MINI_LIST_ITEM>())).pvDummy3 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_MINI_LIST_ITEM),
            "::",
            stringify!(pvDummy3)
        )
    );
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut c_types::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
#[test]
fn bindgen_test_layout_xSTATIC_LIST() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_LIST>(),
        20usize,
        concat!("Size of: ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_LIST>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_LIST))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).uxDummy2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(uxDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).pvDummy3 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(pvDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_LIST>())).xDummy4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_LIST),
            "::",
            stringify!(xDummy4)
        )
    );
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut c_types::c_void,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut c_types::c_void,
    pub ucDummy7: [u8; 16usize],
    pub pvDummy15: [*mut c_types::c_void; 5usize],
    pub ulDummy18: u32,
    pub ucDummy19: u8,
    pub uxDummy20: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TCB() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_TCB>(),
        96usize,
        concat!("Size of: ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_TCB>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_TCB))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).xDummy3 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy5 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pxDummy6 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pxDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ucDummy7 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).pvDummy15 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(pvDummy15)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ulDummy18 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ulDummy18)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).ucDummy19 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(ucDummy19)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TCB>())).uxDummy20 as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TCB),
            "::",
            stringify!(uxDummy20)
        )
    );
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut c_types::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
    pub ucDummy6: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut c_types::c_void,
    pub uxDummy2: UBaseType_t,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_QUEUE__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).pvDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSTATIC_QUEUE__bindgen_ty_1>())).uxDummy2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE__bindgen_ty_1),
            "::",
            stringify!(uxDummy2)
        )
    );
}
#[test]
fn bindgen_test_layout_xSTATIC_QUEUE() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_QUEUE>(),
        72usize,
        concat!("Size of: ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_QUEUE>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_QUEUE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).u as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).xDummy3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).uxDummy4 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(uxDummy4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).ucDummy5 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(ucDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_QUEUE>())).ucDummy6 as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_QUEUE),
            "::",
            stringify!(ucDummy6)
        )
    );
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
    pub ucDummy4: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_EVENT_GROUP() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_EVENT_GROUP>(),
        28usize,
        concat!("Size of: ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_EVENT_GROUP>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_EVENT_GROUP))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_EVENT_GROUP>())).xDummy2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_EVENT_GROUP>())).ucDummy4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_EVENT_GROUP),
            "::",
            stringify!(ucDummy4)
        )
    );
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut c_types::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut c_types::c_void,
    pub pvDummy6: TaskFunction_t,
    pub ucDummy8: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_TIMER() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_TIMER>(),
        40usize,
        concat!("Size of: ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_TIMER>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_TIMER))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).xDummy2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).xDummy3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(xDummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy5 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).pvDummy6 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(pvDummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_TIMER>())).ucDummy8 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_TIMER),
            "::",
            stringify!(ucDummy8)
        )
    );
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [usize; 4usize],
    pub pvDummy2: [*mut c_types::c_void; 3usize],
    pub ucDummy3: u8,
}
#[test]
fn bindgen_test_layout_xSTATIC_STREAM_BUFFER() {
    assert_eq!(
        ::core::mem::size_of::<xSTATIC_STREAM_BUFFER>(),
        32usize,
        concat!("Size of: ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        ::core::mem::align_of::<xSTATIC_STREAM_BUFFER>(),
        4usize,
        concat!("Alignment of ", stringify!(xSTATIC_STREAM_BUFFER))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).uxDummy1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(uxDummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).pvDummy2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(pvDummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSTATIC_STREAM_BUFFER>())).ucDummy3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xSTATIC_STREAM_BUFFER),
            "::",
            stringify!(ucDummy3)
        )
    );
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
    pub pvOwner: *mut c_types::c_void,
    pub pxContainer: *mut xLIST,
}
#[test]
fn bindgen_test_layout_xLIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xLIST_ITEM>(),
        20usize,
        concat!("Size of: ", stringify!(xLIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xLIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xLIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).xItemValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(xItemValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pxNext as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pxNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pxPrevious as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pxPrevious)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pvOwner as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pvOwner)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST_ITEM>())).pxContainer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST_ITEM),
            "::",
            stringify!(pxContainer)
        )
    );
}
pub type ListItem_t = xLIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMINI_LIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
}
#[test]
fn bindgen_test_layout_xMINI_LIST_ITEM() {
    assert_eq!(
        ::core::mem::size_of::<xMINI_LIST_ITEM>(),
        12usize,
        concat!("Size of: ", stringify!(xMINI_LIST_ITEM))
    );
    assert_eq!(
        ::core::mem::align_of::<xMINI_LIST_ITEM>(),
        4usize,
        concat!("Alignment of ", stringify!(xMINI_LIST_ITEM))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).xItemValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(xItemValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).pxNext as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(pxNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMINI_LIST_ITEM>())).pxPrevious as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xMINI_LIST_ITEM),
            "::",
            stringify!(pxPrevious)
        )
    );
}
pub type MiniListItem_t = xMINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST {
    pub uxNumberOfItems: UBaseType_t,
    pub pxIndex: *mut ListItem_t,
    pub xListEnd: MiniListItem_t,
}
#[test]
fn bindgen_test_layout_xLIST() {
    assert_eq!(
        ::core::mem::size_of::<xLIST>(),
        20usize,
        concat!("Size of: ", stringify!(xLIST))
    );
    assert_eq!(
        ::core::mem::align_of::<xLIST>(),
        4usize,
        concat!("Alignment of ", stringify!(xLIST))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).uxNumberOfItems as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(uxNumberOfItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).pxIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(pxIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xLIST>())).xListEnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLIST),
            "::",
            stringify!(xListEnd)
        )
    );
}
pub type List_t = xLIST;
extern "C" {
    pub fn vListInitialise(pxList: *mut List_t);
}
extern "C" {
    pub fn vListInitialiseItem(pxItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsert(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsertEnd(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn uxListRemove(pxItemToRemove: *mut ListItem_t) -> UBaseType_t;
}
pub type CoRoutineHandle_t = *mut c_types::c_void;
pub type crCOROUTINE_CODE =
    ::core::option::Option<unsafe extern "C" fn(arg1: CoRoutineHandle_t, arg2: UBaseType_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct corCoRoutineControlBlock {
    pub pxCoRoutineFunction: crCOROUTINE_CODE,
    pub xGenericListItem: ListItem_t,
    pub xEventListItem: ListItem_t,
    pub uxPriority: UBaseType_t,
    pub uxIndex: UBaseType_t,
    pub uxState: u16,
}
#[test]
fn bindgen_test_layout_corCoRoutineControlBlock() {
    assert_eq!(
        ::core::mem::size_of::<corCoRoutineControlBlock>(),
        56usize,
        concat!("Size of: ", stringify!(corCoRoutineControlBlock))
    );
    assert_eq!(
        ::core::mem::align_of::<corCoRoutineControlBlock>(),
        4usize,
        concat!("Alignment of ", stringify!(corCoRoutineControlBlock))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<corCoRoutineControlBlock>())).pxCoRoutineFunction as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(corCoRoutineControlBlock),
            "::",
            stringify!(pxCoRoutineFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<corCoRoutineControlBlock>())).xGenericListItem as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(corCoRoutineControlBlock),
            "::",
            stringify!(xGenericListItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<corCoRoutineControlBlock>())).xEventListItem as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(corCoRoutineControlBlock),
            "::",
            stringify!(xEventListItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<corCoRoutineControlBlock>())).uxPriority as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(corCoRoutineControlBlock),
            "::",
            stringify!(uxPriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<corCoRoutineControlBlock>())).uxIndex as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(corCoRoutineControlBlock),
            "::",
            stringify!(uxIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<corCoRoutineControlBlock>())).uxState as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(corCoRoutineControlBlock),
            "::",
            stringify!(uxState)
        )
    );
}
pub type CRCB_t = corCoRoutineControlBlock;
extern "C" {
    #[doc = " croutine. h"]
    #[doc = "<pre>"]
    #[doc = "BaseType_t xCoRoutineCreate("]
    #[doc = "crCOROUTINE_CODE pxCoRoutineCode,"]
    #[doc = "UBaseType_t uxPriority,"]
    #[doc = "UBaseType_t uxIndex"]
    #[doc = ");</pre>"]
    #[doc = ""]
    #[doc = " Create a new co-routine and add it to the list of co-routines that are"]
    #[doc = " ready to run."]
    #[doc = ""]
    #[doc = " @param pxCoRoutineCode Pointer to the co-routine function.  Co-routine"]
    #[doc = " functions require special syntax - see the co-routine section of the WEB"]
    #[doc = " documentation for more information."]
    #[doc = ""]
    #[doc = " @param uxPriority The priority with respect to other co-routines at which"]
    #[doc = "  the co-routine will run."]
    #[doc = ""]
    #[doc = " @param uxIndex Used to distinguish between different co-routines that"]
    #[doc = " execute the same function.  See the example below and the co-routine section"]
    #[doc = " of the WEB documentation for further information."]
    #[doc = ""]
    #[doc = " @return pdPASS if the co-routine was successfully created and added to a ready"]
    #[doc = " list, otherwise an error code defined with ProjDefs.h."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vFlashCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )"]
    #[doc = "{"]
    #[doc = "static const char cLedToFlash[ 2 ] = { 5, 6 };"]
    #[doc = "static const TickType_t uxFlashRates[ 2 ] = { 200, 400 };"]
    #[doc = ""]
    #[doc = "crSTART( xHandle );"]
    #[doc = ""]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = "vParTestToggleLED( cLedToFlash[ uxIndex ] );"]
    #[doc = "crDELAY( xHandle, uxFlashRates[ uxIndex ] );"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "crEND();"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vOtherFunction( void )"]
    #[doc = "{"]
    #[doc = "uint8_t ucParameterToPass;"]
    #[doc = "TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "for( uxIndex = 0; uxIndex < 2; uxIndex++ )"]
    #[doc = "{"]
    #[doc = "xCoRoutineCreate( vFlashCoRoutine, 0, uxIndex );"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xCoRoutineCreate xCoRoutineCreate"]
    #[doc = " \\ingroup Tasks"]
    pub fn xCoRoutineCreate(
        pxCoRoutineCode: crCOROUTINE_CODE,
        uxPriority: UBaseType_t,
        uxIndex: UBaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " croutine. h"]
    #[doc = "<pre>"]
    #[doc = "void vCoRoutineSchedule( void );</pre>"]
    #[doc = ""]
    #[doc = " Run a co-routine."]
    #[doc = ""]
    #[doc = " vCoRoutineSchedule() executes the highest priority co-routine that is able"]
    #[doc = " to run.  The co-routine will execute until it either blocks, yields or is"]
    #[doc = " preempted by a task.  Co-routines execute cooperatively so one"]
    #[doc = " co-routine cannot be preempted by another, but can be preempted by a task."]
    #[doc = ""]
    #[doc = " If an application comprises of both tasks and co-routines then"]
    #[doc = " vCoRoutineSchedule should be called from the idle task (in an idle task"]
    #[doc = " hook)."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vApplicationIdleHook( void )"]
    #[doc = "{"]
    #[doc = "vCoRoutineSchedule();"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vApplicationIdleHook( void )"]
    #[doc = "{"]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = "vCoRoutineSchedule();"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vCoRoutineSchedule vCoRoutineSchedule"]
    #[doc = " \\ingroup Tasks"]
    pub fn vCoRoutineSchedule();
}
extern "C" {
    pub fn vCoRoutineAddToDelayedList(xTicksToDelay: TickType_t, pxEventList: *mut List_t);
}
extern "C" {
    pub fn xCoRoutineRemoveFromEventList(pxEventList: *const List_t) -> BaseType_t;
}
#[doc = " task. h"]
#[doc = ""]
#[doc = " Type by which tasks are referenced.  For example, a call to xTaskCreate"]
#[doc = " returns (via a pointer parameter) an TaskHandle_t variable that can then"]
#[doc = " be used as a parameter to vTaskDelete to delete the task."]
#[doc = ""]
#[doc = " \\defgroup TaskHandle_t TaskHandle_t"]
#[doc = " \\ingroup Tasks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    _unused: [u8; 0],
}
pub type TaskHandle_t = *mut tskTaskControlBlock;
pub type TaskHookFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void) -> BaseType_t>;
pub const eTaskState_eRunning: eTaskState = 0;
pub const eTaskState_eReady: eTaskState = 1;
pub const eTaskState_eBlocked: eTaskState = 2;
pub const eTaskState_eSuspended: eTaskState = 3;
pub const eTaskState_eDeleted: eTaskState = 4;
pub const eTaskState_eInvalid: eTaskState = 5;
pub type eTaskState = u32;
pub const eNotifyAction_eNoAction: eNotifyAction = 0;
pub const eNotifyAction_eSetBits: eNotifyAction = 1;
pub const eNotifyAction_eIncrement: eNotifyAction = 2;
pub const eNotifyAction_eSetValueWithOverwrite: eNotifyAction = 3;
pub const eNotifyAction_eSetValueWithoutOverwrite: eNotifyAction = 4;
pub type eNotifyAction = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTIME_OUT {
    pub xOverflowCount: BaseType_t,
    pub xTimeOnEntering: TickType_t,
}
#[test]
fn bindgen_test_layout_xTIME_OUT() {
    assert_eq!(
        ::core::mem::size_of::<xTIME_OUT>(),
        8usize,
        concat!("Size of: ", stringify!(xTIME_OUT))
    );
    assert_eq!(
        ::core::mem::align_of::<xTIME_OUT>(),
        4usize,
        concat!("Alignment of ", stringify!(xTIME_OUT))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTIME_OUT>())).xOverflowCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTIME_OUT),
            "::",
            stringify!(xOverflowCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTIME_OUT>())).xTimeOnEntering as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTIME_OUT),
            "::",
            stringify!(xTimeOnEntering)
        )
    );
}
pub type TimeOut_t = xTIME_OUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMEMORY_REGION {
    pub pvBaseAddress: *mut c_types::c_void,
    pub ulLengthInBytes: u32,
    pub ulParameters: u32,
}
#[test]
fn bindgen_test_layout_xMEMORY_REGION() {
    assert_eq!(
        ::core::mem::size_of::<xMEMORY_REGION>(),
        12usize,
        concat!("Size of: ", stringify!(xMEMORY_REGION))
    );
    assert_eq!(
        ::core::mem::align_of::<xMEMORY_REGION>(),
        4usize,
        concat!("Alignment of ", stringify!(xMEMORY_REGION))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).pvBaseAddress as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(pvBaseAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).ulLengthInBytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(ulLengthInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xMEMORY_REGION>())).ulParameters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xMEMORY_REGION),
            "::",
            stringify!(ulParameters)
        )
    );
}
pub type MemoryRegion_t = xMEMORY_REGION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_PARAMETERS {
    pub pvTaskCode: TaskFunction_t,
    pub pcName: *const c_types::c_char,
    pub usStackDepth: u16,
    pub pvParameters: *mut c_types::c_void,
    pub uxPriority: UBaseType_t,
    pub puxStackBuffer: *mut StackType_t,
    pub xRegions: [MemoryRegion_t; 1usize],
}
#[test]
fn bindgen_test_layout_xTASK_PARAMETERS() {
    assert_eq!(
        ::core::mem::size_of::<xTASK_PARAMETERS>(),
        36usize,
        concat!("Size of: ", stringify!(xTASK_PARAMETERS))
    );
    assert_eq!(
        ::core::mem::align_of::<xTASK_PARAMETERS>(),
        4usize,
        concat!("Alignment of ", stringify!(xTASK_PARAMETERS))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pvTaskCode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pvTaskCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pcName as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pcName)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).usStackDepth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(usStackDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).pvParameters as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(pvParameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).uxPriority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(uxPriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xTASK_PARAMETERS>())).puxStackBuffer as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(puxStackBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_PARAMETERS>())).xRegions as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_PARAMETERS),
            "::",
            stringify!(xRegions)
        )
    );
}
pub type TaskParameters_t = xTASK_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_STATUS {
    pub xHandle: TaskHandle_t,
    pub pcTaskName: *const c_types::c_char,
    pub xTaskNumber: UBaseType_t,
    pub eCurrentState: eTaskState,
    pub uxCurrentPriority: UBaseType_t,
    pub uxBasePriority: UBaseType_t,
    pub ulRunTimeCounter: u32,
    pub pxStackBase: *mut StackType_t,
    pub usStackHighWaterMark: u16,
}
#[test]
fn bindgen_test_layout_xTASK_STATUS() {
    assert_eq!(
        ::core::mem::size_of::<xTASK_STATUS>(),
        36usize,
        concat!("Size of: ", stringify!(xTASK_STATUS))
    );
    assert_eq!(
        ::core::mem::align_of::<xTASK_STATUS>(),
        4usize,
        concat!("Alignment of ", stringify!(xTASK_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).xHandle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(xHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).pcTaskName as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(pcTaskName)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).xTaskNumber as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(xTaskNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).eCurrentState as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(eCurrentState)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).uxCurrentPriority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(uxCurrentPriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).uxBasePriority as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(uxBasePriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).ulRunTimeCounter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(ulRunTimeCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xTASK_STATUS>())).pxStackBase as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(pxStackBase)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xTASK_STATUS>())).usStackHighWaterMark as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xTASK_STATUS),
            "::",
            stringify!(usStackHighWaterMark)
        )
    );
}
pub type TaskStatus_t = xTASK_STATUS;
pub const eSleepModeStatus_eAbortSleep: eSleepModeStatus = 0;
pub const eSleepModeStatus_eStandardSleep: eSleepModeStatus = 1;
pub const eSleepModeStatus_eNoTasksWaitingTimeout: eSleepModeStatus = 2;
pub type eSleepModeStatus = u32;
extern "C" {
    pub fn xTaskCreate(
        pxTaskCode: TaskFunction_t,
        pcName: *const c_types::c_char,
        usStackDepth: u16,
        pvParameters: *mut c_types::c_void,
        uxPriority: UBaseType_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskCreateStatic(
        pxTaskCode: TaskFunction_t,
        pcName: *const c_types::c_char,
        ulStackDepth: u32,
        pvParameters: *mut c_types::c_void,
        uxPriority: UBaseType_t,
        puxStackBuffer: *mut StackType_t,
        pxTaskBuffer: *mut StaticTask_t,
    ) -> TaskHandle_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = "<pre>"]
    #[doc = "void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions );</pre>"]
    #[doc = ""]
    #[doc = " Memory regions are assigned to a restricted task when the task is created by"]
    #[doc = " a call to xTaskCreateRestricted().  These regions can be redefined using"]
    #[doc = " vTaskAllocateMPURegions()."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task being updated."]
    #[doc = ""]
    #[doc = " @param xRegions A pointer to an MemoryRegion_t structure that contains the"]
    #[doc = " new memory region definitions."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] ="]
    #[doc = "{"]
    #[doc = "{ ucOneKByte,\t\t1024,\t\tportMPU_REGION_READ_WRITE },"]
    #[doc = "{ 0,\t\t\t\t0,\t\t\t0 },"]
    #[doc = "{ 0,\t\t\t\t0,\t\t\t0 }"]
    #[doc = "};"]
    #[doc = ""]
    #[doc = "void vATask( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "vTaskAllocateMPURegions( NULL, xAltRegions );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xTaskCreateRestricted xTaskCreateRestricted"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskAllocateMPURegions(xTask: TaskHandle_t, pxRegions: *const MemoryRegion_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskDelete( TaskHandle_t xTask );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelete must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Remove a task from the RTOS real time kernel's management.  The task being"]
    #[doc = " deleted will be removed from all ready, blocked, suspended and event lists."]
    #[doc = ""]
    #[doc = " NOTE:  The idle task is responsible for freeing the kernel allocated"]
    #[doc = " memory from tasks that have been deleted.  It is therefore important that"]
    #[doc = " the idle task is not starved of microcontroller processing time if your"]
    #[doc = " application makes any calls to vTaskDelete ().  Memory allocated by the"]
    #[doc = " task code is not automatically freed, and should be freed before the task"]
    #[doc = " is deleted."]
    #[doc = ""]
    #[doc = " See the demo application file death.c for sample code that utilises"]
    #[doc = " vTaskDelete ()."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task to be deleted.  Passing NULL will"]
    #[doc = " cause the calling task to be deleted."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vOtherFunction( void )"]
    #[doc = "{"]
    #[doc = "TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "vTaskDelete( xHandle );"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vTaskDelete vTaskDelete"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskDelete(xTaskToDelete: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskDelay( const TickType_t xTicksToDelay );</pre>"]
    #[doc = ""]
    #[doc = " Delay a task for a given number of ticks.  The actual time that the"]
    #[doc = " task remains blocked depends on the tick rate.  The constant"]
    #[doc = " portTICK_PERIOD_MS can be used to calculate real time from the tick"]
    #[doc = " rate - with the resolution of one tick period."]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelay must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " vTaskDelay() specifies a time at which the task wishes to unblock relative to"]
    #[doc = " the time at which vTaskDelay() is called.  For example, specifying a block"]
    #[doc = " period of 100 ticks will cause the task to unblock 100 ticks after"]
    #[doc = " vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method"]
    #[doc = " of controlling the frequency of a periodic task as the path taken through the"]
    #[doc = " code, as well as other task and interrupt activity, will effect the frequency"]
    #[doc = " at which vTaskDelay() gets called and therefore the time at which the task"]
    #[doc = " next executes.  See vTaskDelayUntil() for an alternative API function designed"]
    #[doc = " to facilitate fixed frequency execution.  It does this by specifying an"]
    #[doc = " absolute time (rather than a relative time) at which the calling task should"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " @param xTicksToDelay The amount of time, in tick periods, that"]
    #[doc = " the calling task should block."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = "void vTaskFunction( void * pvParameters )"]
    #[doc = "{"]
    #[doc = "const TickType_t xDelay = 500 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = "vToggleLED();"]
    #[doc = "vTaskDelay( xDelay );"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskDelay vTaskDelay"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskDelay(xTicksToDelay: TickType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskDelayUntil( TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Delay a task until a specified time.  This function can be used by periodic"]
    #[doc = " tasks to ensure a constant execution frequency."]
    #[doc = ""]
    #[doc = " This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will"]
    #[doc = " cause a task to block for the specified number of ticks from the time vTaskDelay () is"]
    #[doc = " called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed"]
    #[doc = " execution frequency as the time between a task starting to execute and that task"]
    #[doc = " calling vTaskDelay () may not be fixed [the task may take a different path though the"]
    #[doc = " code between calls, or may get interrupted or preempted a different number of times"]
    #[doc = " each time it executes]."]
    #[doc = ""]
    #[doc = " Whereas vTaskDelay () specifies a wake time relative to the time at which the function"]
    #[doc = " is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " The constant portTICK_PERIOD_MS can be used to calculate real time from the tick"]
    #[doc = " rate - with the resolution of one tick period."]
    #[doc = ""]
    #[doc = " @param pxPreviousWakeTime Pointer to a variable that holds the time at which the"]
    #[doc = " task was last unblocked.  The variable must be initialised with the current time"]
    #[doc = " prior to its first use (see the example below).  Following this the variable is"]
    #[doc = " automatically updated within vTaskDelayUntil ()."]
    #[doc = ""]
    #[doc = " @param xTimeIncrement The cycle time period.  The task will be unblocked at"]
    #[doc = " time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the"]
    #[doc = " same xTimeIncrement parameter value will cause the task to execute with"]
    #[doc = " a fixed interface period."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vTaskFunction( void * pvParameters )"]
    #[doc = "{"]
    #[doc = "TickType_t xLastWakeTime;"]
    #[doc = "const TickType_t xFrequency = 10;"]
    #[doc = ""]
    #[doc = "xLastWakeTime = xTaskGetTickCount ();"]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = "vTaskDelayUntil( &xLastWakeTime, xFrequency );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vTaskDelayUntil vTaskDelayUntil"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskDelayUntil(pxPreviousWakeTime: *mut TickType_t, xTimeIncrement: TickType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>BaseType_t xTaskAbortDelay( TaskHandle_t xTask );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskAbortDelay must be defined as 1 in FreeRTOSConfig.h for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " A task will enter the Blocked state when it is waiting for an event.  The"]
    #[doc = " event it is waiting for can be a temporal event (waiting for a time), such"]
    #[doc = " as when vTaskDelay() is called, or an event on an object, such as when"]
    #[doc = " xQueueReceive() or ulTaskNotifyTake() is called.  If the handle of a task"]
    #[doc = " that is in the Blocked state is used in a call to xTaskAbortDelay() then the"]
    #[doc = " task will leave the Blocked state, and return from whichever function call"]
    #[doc = " placed the task into the Blocked state."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task to remove from the Blocked state."]
    #[doc = ""]
    #[doc = " @return If the task referenced by xTask was not in the Blocked state then"]
    #[doc = " pdFAIL is returned.  Otherwise pdPASS is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskAbortDelay xTaskAbortDelay"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskAbortDelay(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the priority of any task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried.  Passing a NULL"]
    #[doc = " handle results in the priority of the calling task being returned."]
    #[doc = ""]
    #[doc = " @return The priority of xTask."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( void )"]
    #[doc = "{"]
    #[doc = "TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup uxTaskPriorityGet uxTaskPriorityGet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn uxTaskPriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask );</pre>"]
    #[doc = ""]
    #[doc = " A version of uxTaskPriorityGet() that can be used from an ISR."]
    pub fn uxTaskPriorityGetFromISR(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>eTaskState eTaskGetState( TaskHandle_t xTask );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_eTaskGetState must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the state of any task.  States are encoded by the eTaskState"]
    #[doc = " enumerated type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried."]
    #[doc = ""]
    #[doc = " @return The state of xTask at the time the function was called.  Note the"]
    #[doc = " state of the task might change between the function being called, and the"]
    #[doc = " functions return value being tested by the calling task."]
    pub fn eTaskGetState(xTask: TaskHandle_t) -> eTaskState;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState );</pre>"]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Populates a TaskStatus_t structure with information about a task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task being queried.  If xTask is NULL then"]
    #[doc = " information will be returned about the calling task."]
    #[doc = ""]
    #[doc = " @param pxTaskStatus A pointer to the TaskStatus_t structure that will be"]
    #[doc = " filled with information about the task referenced by the handle passed using"]
    #[doc = " the xTask parameter."]
    #[doc = ""]
    #[doc = " @xGetFreeStackSpace The TaskStatus_t structure contains a member to report"]
    #[doc = " the stack high water mark of the task being queried.  Calculating the stack"]
    #[doc = " high water mark takes a relatively long time, and can make the system"]
    #[doc = " temporarily unresponsive - so the xGetFreeStackSpace parameter is provided to"]
    #[doc = " allow the high water mark checking to be skipped.  The high watermark value"]
    #[doc = " will only be written to the TaskStatus_t structure if xGetFreeStackSpace is"]
    #[doc = " not set to pdFALSE;"]
    #[doc = ""]
    #[doc = " @param eState The TaskStatus_t structure contains a member to report the"]
    #[doc = " state of the task being queried.  Obtaining the task state is not as fast as"]
    #[doc = " a simple assignment - so the eState parameter is provided to allow the state"]
    #[doc = " information to be omitted from the TaskStatus_t structure.  To obtain state"]
    #[doc = " information then set eState to eInvalid - otherwise the value passed in"]
    #[doc = " eState will be reported as the task state in the TaskStatus_t structure."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( void )"]
    #[doc = "{"]
    #[doc = "TaskHandle_t xHandle;"]
    #[doc = "TaskStatus_t xTaskDetails;"]
    #[doc = ""]
    #[doc = "xHandle = xTaskGetHandle( \"Task_Name\" );"]
    #[doc = ""]
    #[doc = "configASSERT( xHandle );"]
    #[doc = ""]
    #[doc = "vTaskGetInfo( xHandle,"]
    #[doc = "&xTaskDetails,"]
    #[doc = "pdTRUE, // Include the high water mark in xTaskDetails."]
    #[doc = "eInvalid ); // Include the task state in xTaskDetails."]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vTaskGetInfo vTaskGetInfo"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskGetInfo(
        xTask: TaskHandle_t,
        pxTaskStatus: *mut TaskStatus_t,
        xGetFreeStackSpace: BaseType_t,
        eState: eTaskState,
    );
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Set the priority of any task."]
    #[doc = ""]
    #[doc = " A context switch will occur before the function returns if the priority"]
    #[doc = " being set is higher than the currently executing task."]
    #[doc = ""]
    #[doc = " @param xTask Handle to the task for which the priority is being set."]
    #[doc = " Passing a NULL handle results in the priority of the calling task being set."]
    #[doc = ""]
    #[doc = " @param uxNewPriority The priority to which the task will be set."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( void )"]
    #[doc = "{"]
    #[doc = "TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vTaskPrioritySet vTaskPrioritySet"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskPrioritySet(xTask: TaskHandle_t, uxNewPriority: UBaseType_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskSuspend( TaskHandle_t xTaskToSuspend );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Suspend any task.  When suspended a task will never get any microcontroller"]
    #[doc = " processing time, no matter what its priority."]
    #[doc = ""]
    #[doc = " Calls to vTaskSuspend are not accumulative -"]
    #[doc = " i.e. calling vTaskSuspend () twice on the same task still only requires one"]
    #[doc = " call to vTaskResume () to ready the suspended task."]
    #[doc = ""]
    #[doc = " @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL"]
    #[doc = " handle will cause the calling task to be suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( void )"]
    #[doc = "{"]
    #[doc = "TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskSuspend( NULL );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vTaskSuspend vTaskSuspend"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSuspend(xTaskToSuspend: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskResume( TaskHandle_t xTaskToResume );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Resumes a suspended task."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " vTaskResume ()."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( void )"]
    #[doc = "{"]
    #[doc = "TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskResume( xHandle );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vTaskResume vTaskResume"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskResume(xTaskToResume: TaskHandle_t);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void xTaskResumeFromISR( TaskHandle_t xTaskToResume );</pre>"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " An implementation of vTaskResume() that can be called from within an ISR."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " xTaskResumeFromISR ()."]
    #[doc = ""]
    #[doc = " xTaskResumeFromISR() should not be used to synchronise a task with an"]
    #[doc = " interrupt if there is a chance that the interrupt could arrive prior to the"]
    #[doc = " task being suspended - as this can lead to interrupts being missed. Use of a"]
    #[doc = " semaphore as a synchronisation mechanism would avoid this eventuality."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if resuming the task should result in a context switch,"]
    #[doc = " otherwise pdFALSE. This is used by the ISR to determine if a context switch"]
    #[doc = " may be required following the ISR."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskResumeFromISR vTaskResumeFromISR"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskResumeFromISR(xTaskToResume: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskStartScheduler( void );</pre>"]
    #[doc = ""]
    #[doc = " Starts the real time kernel tick processing.  After calling the kernel"]
    #[doc = " has control over which tasks are executed and when."]
    #[doc = ""]
    #[doc = " See the demo application file main.c for an example of creating"]
    #[doc = " tasks and starting the kernel."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( void )"]
    #[doc = "{"]
    #[doc = "xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskStartScheduler vTaskStartScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskStartScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskEndScheduler( void );</pre>"]
    #[doc = ""]
    #[doc = " NOTE:  At the time of writing only the x86 real mode port, which runs on a PC"]
    #[doc = " in place of DOS, implements this function."]
    #[doc = ""]
    #[doc = " Stops the real time kernel tick.  All created tasks will be automatically"]
    #[doc = " deleted and multitasking (either preemptive or cooperative) will"]
    #[doc = " stop.  Execution then resumes from the point where vTaskStartScheduler ()"]
    #[doc = " was called, as if vTaskStartScheduler () had just returned."]
    #[doc = ""]
    #[doc = " See the demo application file main. c in the demo/PC directory for an"]
    #[doc = " example that uses vTaskEndScheduler ()."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () requires an exit function to be defined within the"]
    #[doc = " portable layer (see vPortEndScheduler () in port. c for the PC port).  This"]
    #[doc = " performs hardware specific operations such as stopping the kernel tick."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () will cause all of the resources allocated by the"]
    #[doc = " kernel to be freed - but will not free resources allocated by application"]
    #[doc = " tasks."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vTaskCode( void * pvParameters )"]
    #[doc = "{"]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = ""]
    #[doc = "vTaskEndScheduler ();"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vAFunction( void )"]
    #[doc = "{"]
    #[doc = "xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " \\defgroup vTaskEndScheduler vTaskEndScheduler"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskEndScheduler();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>void vTaskSuspendAll( void );</pre>"]
    #[doc = ""]
    #[doc = " Suspends the scheduler without disabling interrupts.  Context switches will"]
    #[doc = " not occur while the scheduler is suspended."]
    #[doc = ""]
    #[doc = " After calling vTaskSuspendAll () the calling task will continue to execute"]
    #[doc = " without risk of being swapped out until a call to xTaskResumeAll () has been"]
    #[doc = " made."]
    #[doc = ""]
    #[doc = " API functions that have the potential to cause a context switch (for example,"]
    #[doc = " vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler"]
    #[doc = " is suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vTask1( void * pvParameters )"]
    #[doc = "{"]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = "xTaskResumeAll ();"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup vTaskSuspendAll vTaskSuspendAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskSuspendAll();
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <pre>BaseType_t xTaskResumeAll( void );</pre>"]
    #[doc = ""]
    #[doc = " Resumes scheduler activity after it was suspended by a call to"]
    #[doc = " vTaskSuspendAll()."]
    #[doc = ""]
    #[doc = " xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks"]
    #[doc = " that were previously suspended by a call to vTaskSuspend()."]
    #[doc = ""]
    #[doc = " @return If resuming the scheduler caused a context switch then pdTRUE is"]
    #[doc = "\t\t  returned, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vTask1( void * pvParameters )"]
    #[doc = "{"]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = "vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = ""]
    #[doc = ""]
    #[doc = "if( !xTaskResumeAll () )"]
    #[doc = "{"]
    #[doc = "taskYIELD ();"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xTaskResumeAll xTaskResumeAll"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn xTaskResumeAll() -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TickType_t xTaskGetTickCount( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCount xTaskGetTickCount"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCount() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TickType_t xTaskGetTickCountFromISR( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " This is a version of xTaskGetTickCount() that is safe to be called from an"]
    #[doc = " ISR - provided that TickType_t is the natural word size of the"]
    #[doc = " microcontroller being used or interrupt nesting is either not supported or"]
    #[doc = " not being used."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetTickCountFromISR xTaskGetTickCountFromISR"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCountFromISR() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>uint16_t uxTaskGetNumberOfTasks( void );</PRE>"]
    #[doc = ""]
    #[doc = " @return The number of tasks that the real time kernel is currently managing."]
    #[doc = " This includes all ready, blocked and suspended tasks.  A task that"]
    #[doc = " has been deleted but not yet freed by the idle task will also be"]
    #[doc = " included in the count."]
    #[doc = ""]
    #[doc = " \\defgroup uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn uxTaskGetNumberOfTasks() -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>char *pcTaskGetName( TaskHandle_t xTaskToQuery );</PRE>"]
    #[doc = ""]
    #[doc = " @return The text (human readable) name of the task referenced by the handle"]
    #[doc = " xTaskToQuery.  A task can query its own name by either passing in its own"]
    #[doc = " handle, or by setting xTaskToQuery to NULL."]
    #[doc = ""]
    #[doc = " \\defgroup pcTaskGetName pcTaskGetName"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn pcTaskGetName(xTaskToQuery: TaskHandle_t) -> *mut c_types::c_char;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TaskHandle_t xTaskGetHandle( const char *pcNameToQuery );</PRE>"]
    #[doc = ""]
    #[doc = " NOTE:  This function takes a relatively long time to complete and should be"]
    #[doc = " used sparingly."]
    #[doc = ""]
    #[doc = " @return The handle of the task that has the human readable name pcNameToQuery."]
    #[doc = " NULL is returned if no matching name is found.  INCLUDE_xTaskGetHandle"]
    #[doc = " must be set to 1 in FreeRTOSConfig.h for pcTaskGetHandle() to be available."]
    #[doc = ""]
    #[doc = " \\defgroup pcTaskGetHandle pcTaskGetHandle"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetHandle(pcNameToQuery: *const c_types::c_char) -> TaskHandle_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <PRE>UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask );</PRE>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in words, so on a 32 bit machine"]
    #[doc = " a value of 1 means 4 bytes) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in words, so"]
    #[doc = " actual spaces on the stack rather than bytes) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <PRE>configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask );</PRE>"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in words, so on a 32 bit machine"]
    #[doc = " a value of 1 means 4 bytes) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in words, so"]
    #[doc = " actual spaces on the stack rather than bytes) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark2(xTask: TaskHandle_t) -> u16;
}
extern "C" {
    pub fn vTaskSetThreadLocalStoragePointer(
        xTaskToSet: TaskHandle_t,
        xIndex: BaseType_t,
        pvValue: *mut c_types::c_void,
    );
}
extern "C" {
    pub fn pvTaskGetThreadLocalStoragePointer(
        xTaskToQuery: TaskHandle_t,
        xIndex: BaseType_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " task.h"]
    #[doc = " <pre>BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter );</pre>"]
    #[doc = ""]
    #[doc = " Calls the hook function associated with xTask.  Passing xTask as NULL has"]
    #[doc = " the effect of calling the Running tasks (the calling task) hook function."]
    #[doc = ""]
    #[doc = " pvParameter is passed to the hook function for the task to interpret as it"]
    #[doc = " wants.  The return value is the value returned by the task hook function"]
    #[doc = " registered by the user."]
    pub fn xTaskCallApplicationTaskHook(
        xTask: TaskHandle_t,
        pvParameter: *mut c_types::c_void,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " xTaskGetIdleTaskHandle() is only available if"]
    #[doc = " INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h."]
    #[doc = ""]
    #[doc = " Simply returns the handle of the idle task.  It is not valid to call"]
    #[doc = " xTaskGetIdleTaskHandle() before the scheduler has been started."]
    pub fn xTaskGetIdleTaskHandle() -> TaskHandle_t;
}
extern "C" {
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for"]
    #[doc = " uxTaskGetSystemState() to be available."]
    #[doc = ""]
    #[doc = " uxTaskGetSystemState() populates an TaskStatus_t structure for each task in"]
    #[doc = " the system.  TaskStatus_t structures contain, among other things, members"]
    #[doc = " for the task handle, task name, task priority, task state, and total amount"]
    #[doc = " of run time consumed by the task.  See the TaskStatus_t structure"]
    #[doc = " definition in this file for the full member list."]
    #[doc = ""]
    #[doc = " NOTE:  This function is intended for debugging use only as its use results in"]
    #[doc = " the scheduler remaining suspended for an extended period."]
    #[doc = ""]
    #[doc = " @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures."]
    #[doc = " The array must contain at least one TaskStatus_t structure for each task"]
    #[doc = " that is under the control of the RTOS.  The number of tasks under the control"]
    #[doc = " of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function."]
    #[doc = ""]
    #[doc = " @param uxArraySize The size of the array pointed to by the pxTaskStatusArray"]
    #[doc = " parameter.  The size is specified as the number of indexes in the array, or"]
    #[doc = " the number of TaskStatus_t structures contained in the array, not by the"]
    #[doc = " number of bytes in the array."]
    #[doc = ""]
    #[doc = " @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in"]
    #[doc = " FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the"]
    #[doc = " total run time (as defined by the run time stats clock, see"]
    #[doc = " http://www.freertos.org/rtos-run-time-stats.html) since the target booted."]
    #[doc = " pulTotalRunTime can be set to NULL to omit the total run time information."]
    #[doc = ""]
    #[doc = " @return The number of TaskStatus_t structures that were populated by"]
    #[doc = " uxTaskGetSystemState().  This should equal the number returned by the"]
    #[doc = " uxTaskGetNumberOfTasks() API function, but will be zero if the value passed"]
    #[doc = " in the uxArraySize parameter was too small."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "void vTaskGetRunTimeStats( char *pcWriteBuffer )"]
    #[doc = "{"]
    #[doc = "TaskStatus_t *pxTaskStatusArray;"]
    #[doc = "volatile UBaseType_t uxArraySize, x;"]
    #[doc = "uint32_t ulTotalRunTime, ulStatsAsPercentage;"]
    #[doc = ""]
    #[doc = "pcWriteBuffer = 0x00;"]
    #[doc = ""]
    #[doc = "uxArraySize = uxTaskGetNumberOfTasks();"]
    #[doc = ""]
    #[doc = "pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );"]
    #[doc = ""]
    #[doc = "if( pxTaskStatusArray != NULL )"]
    #[doc = "{"]
    #[doc = "uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalRunTime );"]
    #[doc = ""]
    #[doc = "ulTotalRunTime /= 100UL;"]
    #[doc = ""]
    #[doc = "if( ulTotalRunTime > 0 )"]
    #[doc = "{"]
    #[doc = "for( x = 0; x < uxArraySize; x++ )"]
    #[doc = "{"]
    #[doc = "ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;"]
    #[doc = ""]
    #[doc = "if( ulStatsAsPercentage > 0UL )"]
    #[doc = "{"]
    #[doc = "sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );"]
    #[doc = "}"]
    #[doc = "else"]
    #[doc = "{"]
    #[doc = "sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t<1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "vPortFree( pxTaskStatusArray );"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    pub fn uxTaskGetSystemState(
        pxTaskStatusArray: *mut TaskStatus_t,
        uxArraySize: UBaseType_t,
        pulTotalRunTime: *mut u32,
    ) -> UBaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskList( char *pcWriteBuffer );</PRE>"]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must"]
    #[doc = " both be defined as 1 for this function to be available.  See the"]
    #[doc = " configuration section of the FreeRTOS.org website for more information."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Lists all the current tasks, along with their current state and stack"]
    #[doc = " usage high water mark."]
    #[doc = ""]
    #[doc = " Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or"]
    #[doc = " suspended ('S')."]
    #[doc = ""]
    #[doc = " PLEASE NOTE:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskList() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays task"]
    #[doc = " names, states and stack usage."]
    #[doc = ""]
    #[doc = " vTaskList() has a dependency on the sprintf() C library function that might"]
    #[doc = " bloat the code size, use a lot of stack, and provide different results on"]
    #[doc = " different platforms.  An alternative, tiny, third party, and limited"]
    #[doc = " functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState()"]
    #[doc = " directly to get access to raw stats data, rather than indirectly through a"]
    #[doc = " call to vTaskList()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the above mentioned details"]
    #[doc = " will be written, in ASCII form.  This buffer is assumed to be large"]
    #[doc = " enough to contain the generated report.  Approximately 40 bytes per"]
    #[doc = " task should be sufficient."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskList vTaskList"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskList(pcWriteBuffer: *mut c_types::c_char);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskGetRunTimeStats( char *pcWriteBuffer );</PRE>"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " Calling vTaskGetRunTimeStats() writes the total execution time of each"]
    #[doc = " task into a buffer, both as an absolute count value and as a percentage"]
    #[doc = " of the total system execution time."]
    #[doc = ""]
    #[doc = " NOTE 2:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays the"]
    #[doc = " amount of time each task has spent in the Running state in both absolute and"]
    #[doc = " percentage terms."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() has a dependency on the sprintf() C library function"]
    #[doc = " that might bloat the code size, use a lot of stack, and provide different"]
    #[doc = " results on different platforms.  An alternative, tiny, third party, and"]
    #[doc = " limited functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState() directly"]
    #[doc = " to get access to raw stats data, rather than indirectly through a call to"]
    #[doc = " vTaskGetRunTimeStats()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the execution times will be"]
    #[doc = " written, in ASCII form.  This buffer is assumed to be large enough to"]
    #[doc = " contain the generated report.  Approximately 40 bytes per task should"]
    #[doc = " be sufficient."]
    #[doc = ""]
    #[doc = " \\defgroup vTaskGetRunTimeStats vTaskGetRunTimeStats"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskGetRunTimeStats(pcWriteBuffer: *mut c_types::c_char);
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>TickType_t xTaskGetIdleRunTimeCounter( void );</PRE>"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " While uxTaskGetSystemState() and vTaskGetRunTimeStats() writes the total"]
    #[doc = " execution time of each task into a buffer, xTaskGetIdleRunTimeCounter()"]
    #[doc = " returns the total execution time of just the idle task."]
    #[doc = ""]
    #[doc = " @return The total run time of the idle task.  This is the amount of time the"]
    #[doc = " idle task has actually been executing.  The unit of time is dependent on the"]
    #[doc = " frequency configured using the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and"]
    #[doc = " portGET_RUN_TIME_COUNTER_VALUE() macros."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskGetIdleRunTimeCounter xTaskGetIdleRunTimeCounter"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetIdleRunTimeCounter() -> TickType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );</PRE>"]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private"]
    #[doc = " \"notification value\", which is a 32-bit unsigned integer (uint32_t)."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment the task's notification value.  In that way"]
    #[doc = " task notifications can be used to send data to a task, or be used as light"]
    #[doc = " weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was"]
    #[doc = " already in the Blocked state to wait for a notification when the notification"]
    #[doc = " arrives then the task will automatically be removed from the Blocked state"]
    #[doc = " (unblocked) and the notification cleared."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWait() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTake() to [optionally] block"]
    #[doc = " to wait for its notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " See http://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The task's notification value is bitwise ORed with ulValue.  xTaskNofify()"]
    #[doc = " always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The task's notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotify() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The task's notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification (the"]
    #[doc = " task already had a notification pending).  xTaskNotify() always returns"]
    #[doc = " pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending then"]
    #[doc = " the task's notification value is set to ulValue and xTaskNotify() will"]
    #[doc = " return pdPASS.  If the task being notified already had a notification"]
    #[doc = " pending then no action is performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification without its notification value being"]
    #[doc = " updated.  ulValue is not used and xTaskNotify() always returns pdPASS in"]
    #[doc = " this case."]
    #[doc = ""]
    #[doc = "  pulPreviousNotificationValue -"]
    #[doc = "  Can be used to pass out the subject task's notification value before any"]
    #[doc = "  bits are modified by the notify function."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotify xTaskNotify"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotify(
        xTaskToNotify: TaskHandle_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );</PRE>"]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private"]
    #[doc = " \"notification value\", which is a 32-bit unsigned integer (uint32_t)."]
    #[doc = ""]
    #[doc = " A version of xTaskNotify() that can be used from an interrupt service routine"]
    #[doc = " (ISR)."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment the task's notification value.  In that way"]
    #[doc = " task notifications can be used to send data to a task, or be used as light"]
    #[doc = " weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was"]
    #[doc = " already in the Blocked state to wait for a notification when the notification"]
    #[doc = " arrives then the task will automatically be removed from the Blocked state"]
    #[doc = " (unblocked) and the notification cleared."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWait() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTake() to [optionally] block"]
    #[doc = " to wait for its notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " See http://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The task's notification value is bitwise ORed with ulValue.  xTaskNofify()"]
    #[doc = " always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The task's notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotify() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The task's notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification (the"]
    #[doc = " task already had a notification pending).  xTaskNotify() always returns"]
    #[doc = " pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending then"]
    #[doc = " the task's notification value is set to ulValue and xTaskNotify() will"]
    #[doc = " return pdPASS.  If the task being notified already had a notification"]
    #[doc = " pending then no action is performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification without its notification value being"]
    #[doc = " updated.  ulValue is not used and xTaskNotify() always returns pdPASS in"]
    #[doc = " this case."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should"]
    #[doc = " be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotify xTaskNotify"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyFromISR(
        xTaskToNotify: TaskHandle_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );</pre>"]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private"]
    #[doc = " \"notification value\", which is a 32-bit unsigned integer (uint32_t)."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment the task's notification value.  In that way"]
    #[doc = " task notifications can be used to send data to a task, or be used as light"]
    #[doc = " weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was"]
    #[doc = " already in the Blocked state to wait for a notification when the notification"]
    #[doc = " arrives then the task will automatically be removed from the Blocked state"]
    #[doc = " (unblocked) and the notification cleared."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWait() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTake() to [optionally] block"]
    #[doc = " to wait for its notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " See http://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value"]
    #[doc = " will be cleared in the calling task's notification value before the task"]
    #[doc = " checks to see if any notifications are pending, and optionally blocks if no"]
    #[doc = " notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if"]
    #[doc = " limits.h is included) or 0xffffffffUL (if limits.h is not included) will have"]
    #[doc = " the effect of resetting the task's notification value to 0.  Setting"]
    #[doc = " ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnExit If a notification is pending or received before"]
    #[doc = " the calling task exits the xTaskNotifyWait() function then the task's"]
    #[doc = " notification value (see the xTaskNotify() API function) is passed out using"]
    #[doc = " the pulNotificationValue parameter.  Then any bits that are set in"]
    #[doc = " ulBitsToClearOnExit will be cleared in the task's notification value (note"]
    #[doc = " *pulNotificationValue is set before any bits are cleared).  Setting"]
    #[doc = " ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL"]
    #[doc = " (if limits.h is not included) will have the effect of resetting the task's"]
    #[doc = " notification value to 0 before the function exits.  Setting"]
    #[doc = " ulBitsToClearOnExit to 0 will leave the task's notification value unchanged"]
    #[doc = " when the function exits (in which case the value passed out in"]
    #[doc = " pulNotificationValue will match the task's notification value)."]
    #[doc = ""]
    #[doc = " @param pulNotificationValue Used to pass the task's notification value out"]
    #[doc = " of the function.  Note the value passed out will not be effected by the"]
    #[doc = " clearing of any bits caused by ulBitsToClearOnExit being non-zero."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for a notification to be received, should a notification"]
    #[doc = " not already be pending when xTaskNotifyWait() was called.  The task"]
    #[doc = " will not consume any processing time while it is in the Blocked state.  This"]
    #[doc = " is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be"]
    #[doc = " used to convert a time specified in milliseconds to a time specified in"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @return If a notification was received (including notifications that were"]
    #[doc = " already pending when xTaskNotifyWait was called) then pdPASS is"]
    #[doc = " returned.  Otherwise pdFAIL is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyWait xTaskNotifyWait"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskNotifyWait(
        ulBitsToClearOnEntry: u32,
        ulBitsToClearOnExit: u32,
        pulNotificationValue: *mut u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>void vTaskNotifyGiveFromISR( TaskHandle_t xTaskHandle, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro"]
    #[doc = " to be available."]
    #[doc = ""]
    #[doc = " When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private"]
    #[doc = " \"notification value\", which is a 32-bit unsigned integer (uint32_t)."]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyGive() that can be called from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment the task's notification value.  In that way"]
    #[doc = " task notifications can be used to send data to a task, or be used as light"]
    #[doc = " weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " vTaskNotifyGiveFromISR() is intended for use when task notifications are"]
    #[doc = " used as light weight and faster binary or counting semaphore equivalents."]
    #[doc = " Actual FreeRTOS semaphores are given from an ISR using the"]
    #[doc = " xSemaphoreGiveFromISR() API function, the equivalent action that instead uses"]
    #[doc = " a task notification is vTaskNotifyGiveFromISR()."]
    #[doc = ""]
    #[doc = " When task notifications are being used as a binary or counting semaphore"]
    #[doc = " equivalent then the task being notified should wait for the notification"]
    #[doc = " using the ulTaskNotificationTake() API function rather than the"]
    #[doc = " xTaskNotifyWait() API function."]
    #[doc = ""]
    #[doc = " See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch"]
    #[doc = " should be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskNotifyWait xTaskNotifyWait"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn vTaskNotifyGiveFromISR(
        xTaskToNotify: TaskHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    );
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );</pre>"]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private"]
    #[doc = " \"notification value\", which is a 32-bit unsigned integer (uint32_t)."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment the task's notification value.  In that way"]
    #[doc = " task notifications can be used to send data to a task, or be used as light"]
    #[doc = " weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTake() is intended for use when a task notification is used as a"]
    #[doc = " faster and lighter weight binary or counting semaphore alternative.  Actual"]
    #[doc = " FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the"]
    #[doc = " equivalent action that instead uses a task notification is"]
    #[doc = " ulTaskNotifyTake()."]
    #[doc = ""]
    #[doc = " When a task is using its notification value as a binary or counting semaphore"]
    #[doc = " other tasks should send notifications to it using the xTaskNotifyGive()"]
    #[doc = " macro, or xTaskNotify() function with the eAction parameter set to"]
    #[doc = " eIncrement."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTake() can either clear the task's notification value to"]
    #[doc = " zero on exit, in which case the notification value acts like a binary"]
    #[doc = " semaphore, or decrement the task's notification value on exit, in which case"]
    #[doc = " the notification value acts like a counting semaphore."]
    #[doc = ""]
    #[doc = " A task can use ulTaskNotifyTake() to [optionally] block to wait for a"]
    #[doc = " the task's notification value to be non-zero.  The task does not consume any"]
    #[doc = " CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " Where as xTaskNotifyWait() will return when a notification is pending,"]
    #[doc = " ulTaskNotifyTake() will return when the task's notification value is"]
    #[doc = " not zero."]
    #[doc = ""]
    #[doc = " See http://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's"]
    #[doc = " notification value is decremented when the function exits.  In this way the"]
    #[doc = " notification value acts like a counting semaphore.  If xClearCountOnExit is"]
    #[doc = " not pdFALSE then the task's notification value is cleared to zero when the"]
    #[doc = " function exits.  In this way the notification value acts like a binary"]
    #[doc = " semaphore."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for the task's notification value to be greater than zero,"]
    #[doc = " should the count not already be greater than zero when"]
    #[doc = " ulTaskNotifyTake() was called.  The task will not consume any processing"]
    #[doc = " time while it is in the Blocked state.  This is specified in kernel ticks,"]
    #[doc = " the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time"]
    #[doc = " specified in milliseconds to a time specified in ticks."]
    #[doc = ""]
    #[doc = " @return The task's notification count before it is either cleared to zero or"]
    #[doc = " decremented (see the xClearCountOnExit parameter)."]
    #[doc = ""]
    #[doc = " \\defgroup ulTaskNotifyTake ulTaskNotifyTake"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskNotifyTake(xClearCountOnExit: BaseType_t, xTicksToWait: TickType_t) -> u32;
}
extern "C" {
    #[doc = " task. h"]
    #[doc = " <PRE>BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );</pre>"]
    #[doc = ""]
    #[doc = " If the notification state of the task referenced by the handle xTask is"]
    #[doc = " eNotified, then set the task's notification state to eNotWaitingNotification."]
    #[doc = " The task's notification value is not altered.  Set xTask to NULL to clear the"]
    #[doc = " notification state of the calling task."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the task's notification state was set to"]
    #[doc = " eNotWaitingNotification, otherwise pdFALSE."]
    #[doc = " \\defgroup xTaskNotifyStateClear xTaskNotifyStateClear"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskNotifyStateClear(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskIncrementTick() -> BaseType_t;
}
extern "C" {
    pub fn vTaskPlaceOnEventList(pxEventList: *mut List_t, xTicksToWait: TickType_t);
}
extern "C" {
    pub fn vTaskPlaceOnUnorderedEventList(
        pxEventList: *mut List_t,
        xItemValue: TickType_t,
        xTicksToWait: TickType_t,
    );
}
extern "C" {
    pub fn vTaskPlaceOnEventListRestricted(
        pxEventList: *mut List_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xTaskRemoveFromEventList(pxEventList: *const List_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskRemoveFromUnorderedEventList(
        pxEventListItem: *mut ListItem_t,
        xItemValue: TickType_t,
    );
}
extern "C" {
    pub fn vTaskSwitchContext();
}
extern "C" {
    pub fn uxTaskResetEventItemValue() -> TickType_t;
}
extern "C" {
    pub fn xTaskGetCurrentTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    pub fn xTaskCheckForTimeOut(
        pxTimeOut: *mut TimeOut_t,
        pxTicksToWait: *mut TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn vTaskMissedYield();
}
extern "C" {
    pub fn xTaskGetSchedulerState() -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityInherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityDisinherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskPriorityDisinheritAfterTimeout(
        pxMutexHolder: TaskHandle_t,
        uxHighestPriorityWaitingTask: UBaseType_t,
    );
}
extern "C" {
    pub fn uxTaskGetTaskNumber(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn vTaskSetTaskNumber(xTask: TaskHandle_t, uxHandle: UBaseType_t);
}
extern "C" {
    pub fn vTaskStepTick(xTicksToJump: TickType_t);
}
extern "C" {
    pub fn eTaskConfirmSleepModeStatus() -> eSleepModeStatus;
}
extern "C" {
    pub fn pvTaskIncrementMutexHeldCount() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskInternalSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
#[doc = " Type by which software timers are referenced.  For example, a call to"]
#[doc = " xTimerCreate() returns an TimerHandle_t variable that can then be used to"]
#[doc = " reference the subject timer in calls to other software timer API functions"]
#[doc = " (for example, xTimerStart(), xTimerReset(), etc.)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmrTimerControl {
    _unused: [u8; 0],
}
pub type TimerHandle_t = *mut tmrTimerControl;
pub type TimerCallbackFunction_t =
    ::core::option::Option<unsafe extern "C" fn(xTimer: TimerHandle_t)>;
pub type PendedFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void, arg2: u32)>;
extern "C" {
    pub fn xTimerCreate(
        pcTimerName: *const c_types::c_char,
        xTimerPeriodInTicks: TickType_t,
        uxAutoReload: UBaseType_t,
        pvTimerID: *mut c_types::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
    ) -> TimerHandle_t;
}
extern "C" {
    pub fn xTimerCreateStatic(
        pcTimerName: *const c_types::c_char,
        xTimerPeriodInTicks: TickType_t,
        uxAutoReload: UBaseType_t,
        pvTimerID: *mut c_types::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
        pxTimerBuffer: *mut StaticTimer_t,
    ) -> TimerHandle_t;
}
extern "C" {
    #[doc = " void *pvTimerGetTimerID( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer, and by calling the"]
    #[doc = " vTimerSetTimerID() API function."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return The ID assigned to the timer being queried."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn pvTimerGetTimerID(xTimer: TimerHandle_t) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID );"]
    #[doc = ""]
    #[doc = " Sets the ID assigned to the timer."]
    #[doc = ""]
    #[doc = " IDs are assigned to timers using the pvTimerID parameter of the call to"]
    #[doc = " xTimerCreated() that was used to create the timer."]
    #[doc = ""]
    #[doc = " If the same callback function is assigned to multiple timers then the timer"]
    #[doc = " ID can be used as time specific (timer local) storage."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being updated."]
    #[doc = ""]
    #[doc = " @param pvNewID The ID to assign to the timer."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = ""]
    #[doc = " See the xTimerCreate() API function example usage scenario."]
    pub fn vTimerSetTimerID(xTimer: TimerHandle_t, pvNewID: *mut c_types::c_void);
}
extern "C" {
    #[doc = " BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Queries a timer to see if it is active or dormant."]
    #[doc = ""]
    #[doc = " A timer will be dormant if:"]
    #[doc = "     1) It has been created but not started, or"]
    #[doc = "     2) It is an expired one-shot timer that has not been restarted."]
    #[doc = ""]
    #[doc = " Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),"]
    #[doc = " xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and"]
    #[doc = " xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the"]
    #[doc = " active state."]
    #[doc = ""]
    #[doc = " @param xTimer The timer being queried."]
    #[doc = ""]
    #[doc = " @return pdFALSE will be returned if the timer is dormant.  A value other than"]
    #[doc = " pdFALSE will be returned if the timer is active."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @verbatim"]
    #[doc = " // This function assumes xTimer has already been created."]
    #[doc = " void vAFunction( TimerHandle_t xTimer )"]
    #[doc = " {"]
    #[doc = "     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently \"if( xTimerIsTimerActive( xTimer ) )\""]
    #[doc = "     {"]
    #[doc = "         // xTimer is active, do something."]
    #[doc = "     }"]
    #[doc = "     else"]
    #[doc = "     {"]
    #[doc = "         // xTimer is not active, do something else."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " @endverbatim"]
    pub fn xTimerIsTimerActive(xTimer: TimerHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " TaskHandle_t xTimerGetTimerDaemonTaskHandle( void );"]
    #[doc = ""]
    #[doc = " Simply returns the handle of the timer service/daemon task.  It it not valid"]
    #[doc = " to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started."]
    pub fn xTimerGetTimerDaemonTaskHandle() -> TaskHandle_t;
}
extern "C" {
    #[doc = " BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,"]
    #[doc = "                                          void *pvParameter1,"]
    #[doc = "                                          uint32_t ulParameter2,"]
    #[doc = "                                          BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " Used from application interrupt service routines to defer the execution of a"]
    #[doc = " function to the RTOS daemon task (the timer service task, hence this function"]
    #[doc = " is implemented in timers.c and is prefixed with 'Timer')."]
    #[doc = ""]
    #[doc = " Ideally an interrupt service routine (ISR) is kept as short as possible, but"]
    #[doc = " sometimes an ISR either has a lot of processing to do, or needs to perform"]
    #[doc = " processing that is not deterministic.  In these cases"]
    #[doc = " xTimerPendFunctionCallFromISR() can be used to defer processing of a function"]
    #[doc = " to the RTOS daemon task."]
    #[doc = ""]
    #[doc = " A mechanism is provided that allows the interrupt to return directly to the"]
    #[doc = " task that will subsequently execute the pended callback function.  This"]
    #[doc = " allows the callback function to execute contiguously in time with the"]
    #[doc = " interrupt - just as if the callback had executed in the interrupt itself."]
    #[doc = ""]
    #[doc = " @param xFunctionToPend The function to execute from the timer service/"]
    #[doc = " daemon task.  The function must conform to the PendedFunction_t"]
    #[doc = " prototype."]
    #[doc = ""]
    #[doc = " @param pvParameter1 The value of the callback function's first parameter."]
    #[doc = " The parameter has a void * type to allow it to be used to pass any type."]
    #[doc = " For example, unsigned longs can be cast to a void *, or the void * can be"]
    #[doc = " used to point to a structure."]
    #[doc = ""]
    #[doc = " @param ulParameter2 The value of the callback function's second parameter."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken As mentioned above, calling this function"]
    #[doc = " will result in a message being sent to the timer daemon task.  If the"]
    #[doc = " priority of the timer daemon task (which is set using"]
    #[doc = " configTIMER_TASK_PRIORITY in FreeRTOSConfig.h) is higher than the priority of"]
    #[doc = " the currently running task (the task the interrupt interrupted) then"]
    #[doc = " *pxHigherPriorityTaskWoken will be set to pdTRUE within"]
    #[doc = " xTimerPendFunctionCallFromISR(), indicating that a context switch should be"]
    #[doc = " requested before the interrupt exits.  For that reason"]
    #[doc = " *pxHigherPriorityTaskWoken must be initialised to pdFALSE.  See the"]
    #[doc = " example code below."]
    #[doc = ""]
    #[doc = " @return pdPASS is returned if the message was successfully sent to the"]
    #[doc = " timer daemon task, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @verbatim"]
    #[doc = ""]
    #[doc = "\t// The callback function that will execute in the context of the daemon task."]
    #[doc = "  // Note callback functions must all use this same prototype."]
    #[doc = "  void vProcessInterface( void *pvParameter1, uint32_t ulParameter2 )"]
    #[doc = "\t{"]
    #[doc = "\t\tBaseType_t xInterfaceToService;"]
    #[doc = ""]
    #[doc = "\t\t// The interface that requires servicing is passed in the second"]
    #[doc = "      // parameter.  The first parameter is not used in this case."]
    #[doc = "\t\txInterfaceToService = ( BaseType_t ) ulParameter2;"]
    #[doc = ""]
    #[doc = "\t\t// ...Perform the processing here..."]
    #[doc = "\t}"]
    #[doc = ""]
    #[doc = "\t// An ISR that receives data packets from multiple interfaces"]
    #[doc = "  void vAnISR( void )"]
    #[doc = "\t{"]
    #[doc = "\t\tBaseType_t xInterfaceToService, xHigherPriorityTaskWoken;"]
    #[doc = ""]
    #[doc = "\t\t// Query the hardware to determine which interface needs processing."]
    #[doc = "\t\txInterfaceToService = prvCheckInterfaces();"]
    #[doc = ""]
    #[doc = "      // The actual processing is to be deferred to a task.  Request the"]
    #[doc = "      // vProcessInterface() callback function is executed, passing in the"]
    #[doc = "\t\t// number of the interface that needs processing.  The interface to"]
    #[doc = "\t\t// service is passed in the second parameter.  The first parameter is"]
    #[doc = "\t\t// not used in this case."]
    #[doc = "\t\txHigherPriorityTaskWoken = pdFALSE;"]
    #[doc = "\t\txTimerPendFunctionCallFromISR( vProcessInterface, NULL, ( uint32_t ) xInterfaceToService, &xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "\t\t// If xHigherPriorityTaskWoken is now set to pdTRUE then a context"]
    #[doc = "\t\t// switch should be requested.  The macro used is port specific and will"]
    #[doc = "\t\t// be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to"]
    #[doc = "\t\t// the documentation page for the port being used."]
    #[doc = "\t\tportYIELD_FROM_ISR( xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "\t}"]
    #[doc = " @endverbatim"]
    pub fn xTimerPendFunctionCallFromISR(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut c_types::c_void,
        ulParameter2: u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,"]
    #[doc = "                                    void *pvParameter1,"]
    #[doc = "                                    uint32_t ulParameter2,"]
    #[doc = "                                    TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " Used to defer the execution of a function to the RTOS daemon task (the timer"]
    #[doc = " service task, hence this function is implemented in timers.c and is prefixed"]
    #[doc = " with 'Timer')."]
    #[doc = ""]
    #[doc = " @param xFunctionToPend The function to execute from the timer service/"]
    #[doc = " daemon task.  The function must conform to the PendedFunction_t"]
    #[doc = " prototype."]
    #[doc = ""]
    #[doc = " @param pvParameter1 The value of the callback function's first parameter."]
    #[doc = " The parameter has a void * type to allow it to be used to pass any type."]
    #[doc = " For example, unsigned longs can be cast to a void *, or the void * can be"]
    #[doc = " used to point to a structure."]
    #[doc = ""]
    #[doc = " @param ulParameter2 The value of the callback function's second parameter."]
    #[doc = ""]
    #[doc = " @param xTicksToWait Calling this function will result in a message being"]
    #[doc = " sent to the timer daemon task on a queue.  xTicksToWait is the amount of"]
    #[doc = " time the calling task should remain in the Blocked state (so not using any"]
    #[doc = " processing time) for space to become available on the timer queue if the"]
    #[doc = " queue is found to be full."]
    #[doc = ""]
    #[doc = " @return pdPASS is returned if the message was successfully sent to the"]
    #[doc = " timer daemon task, otherwise pdFALSE is returned."]
    #[doc = ""]
    pub fn xTimerPendFunctionCall(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut c_types::c_void,
        ulParameter2: u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " const char * const pcTimerGetName( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the name that was assigned to a timer when the timer was created."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The name assigned to the timer specified by the xTimer parameter."]
    pub fn pcTimerGetName(xTimer: TimerHandle_t) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload );"]
    #[doc = ""]
    #[doc = " Updates a timer to be either an autoreload timer, in which case the timer"]
    #[doc = " automatically resets itself each time it expires, or a one shot timer, in"]
    #[doc = " which case the timer will only expire once unless it is manually restarted."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being updated."]
    #[doc = ""]
    #[doc = " @param uxAutoReload If uxAutoReload is set to pdTRUE then the timer will"]
    #[doc = " expire repeatedly with a frequency set by the timer's period (see the"]
    #[doc = " xTimerPeriodInTicks parameter of the xTimerCreate() API function).  If"]
    #[doc = " uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and"]
    #[doc = " enter the dormant state after it expires."]
    pub fn vTimerSetReloadMode(xTimer: TimerHandle_t, uxAutoReload: UBaseType_t);
}
extern "C" {
    #[doc = " TickType_t xTimerGetPeriod( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the period of a timer."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return The period of the timer in ticks."]
    pub fn xTimerGetPeriod(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    #[doc = " TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer );"]
    #[doc = ""]
    #[doc = " Returns the time in ticks at which the timer will expire.  If this is less"]
    #[doc = " than the current tick count then the expiry time has overflowed from the"]
    #[doc = " current time."]
    #[doc = ""]
    #[doc = " @param xTimer The handle of the timer being queried."]
    #[doc = ""]
    #[doc = " @return If the timer is running then the time in ticks at which the timer"]
    #[doc = " will next expire is returned.  If the timer is not running then the return"]
    #[doc = " value is undefined."]
    pub fn xTimerGetExpiryTime(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn xTimerCreateTimerTask() -> BaseType_t;
}
extern "C" {
    pub fn xTimerGenericCommand(
        xTimer: TimerHandle_t,
        xCommandID: BaseType_t,
        xOptionalValue: TickType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
#[doc = " event_groups.h"]
#[doc = ""]
#[doc = " Type by which event groups are referenced.  For example, a call to"]
#[doc = " xEventGroupCreate() returns an EventGroupHandle_t variable that can then"]
#[doc = " be used as a parameter to other event group functions."]
#[doc = ""]
#[doc = " \\defgroup EventGroupHandle_t EventGroupHandle_t"]
#[doc = " \\ingroup EventGroup"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventGroupDef_t {
    _unused: [u8; 0],
}
pub type EventGroupHandle_t = *mut EventGroupDef_t;
pub type EventBits_t = TickType_t;
extern "C" {
    pub fn xEventGroupCreate() -> EventGroupHandle_t;
}
extern "C" {
    pub fn xEventGroupCreateStatic(
        pxEventGroupBuffer: *mut StaticEventGroup_t,
    ) -> EventGroupHandle_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = "<pre>"]
    #[doc = "EventBits_t xEventGroupWaitBits( \tEventGroupHandle_t xEventGroup,"]
    #[doc = "const EventBits_t uxBitsToWaitFor,"]
    #[doc = "const BaseType_t xClearOnExit,"]
    #[doc = "const BaseType_t xWaitForAllBits,"]
    #[doc = "const TickType_t xTicksToWait );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " [Potentially] block to wait for one or more bits to be set within a"]
    #[doc = " previously created event group."]
    #[doc = ""]
    #[doc = " This function cannot be called from an interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and/or bit 1 and/or bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xClearOnExit If xClearOnExit is set to pdTRUE then any bits within"]
    #[doc = " uxBitsToWaitFor that are set within the event group will be cleared before"]
    #[doc = " xEventGroupWaitBits() returns if the wait condition was met (if the function"]
    #[doc = " returns for a reason other than a timeout).  If xClearOnExit is set to"]
    #[doc = " pdFALSE then the bits set in the event group are not altered when the call to"]
    #[doc = " xEventGroupWaitBits() returns."]
    #[doc = ""]
    #[doc = " @param xWaitForAllBits If xWaitForAllBits is set to pdTRUE then"]
    #[doc = " xEventGroupWaitBits() will return when either all the bits in uxBitsToWaitFor"]
    #[doc = " are set or the specified block time expires.  If xWaitForAllBits is set to"]
    #[doc = " pdFALSE then xEventGroupWaitBits() will return when any one of the bits set"]
    #[doc = " in uxBitsToWaitFor is set or the specified block time expires.  The block"]
    #[doc = " time is specified by the xTicksToWait parameter."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for one/all (depending on the xWaitForAllBits value) of the bits specified by"]
    #[doc = " uxBitsToWaitFor to become set."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupWaitBits() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupWaitBits() returned because the bits it was waiting for were set"]
    #[doc = " then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared in the case that xClearOnExit parameter was set to"]
    #[doc = " pdTRUE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "#define BIT_0\t( 1 << 0 )"]
    #[doc = "#define BIT_4\t( 1 << 4 )"]
    #[doc = ""]
    #[doc = "void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = "{"]
    #[doc = "EventBits_t uxBits;"]
    #[doc = "const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "uxBits = xEventGroupWaitBits("]
    #[doc = "xEventGroup,\t// The event group being tested."]
    #[doc = "BIT_0 | BIT_4,\t// The bits within the event group to wait for."]
    #[doc = "pdTRUE,\t\t\t// BIT_0 and BIT_4 should be cleared before returning."]
    #[doc = "pdFALSE,\t\t// Don't wait for both bits, either bit will do."]
    #[doc = "xTicksToWait );\t// Wait a maximum of 100ms for either bit to be set."]
    #[doc = ""]
    #[doc = "if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xEventGroupWaitBits xEventGroupWaitBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupWaitBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToWaitFor: EventBits_t,
        xClearOnExit: BaseType_t,
        xWaitForAllBits: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = "<pre>"]
    #[doc = "EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Clear bits within an event group.  This function cannot be called from an"]
    #[doc = " interrupt."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be cleared."]
    #[doc = ""]
    #[doc = " @param uxBitsToClear A bitwise value that indicates the bit or bits to clear"]
    #[doc = " in the event group.  For example, to clear bit 3 only, set uxBitsToClear to"]
    #[doc = " 0x08.  To clear bit 3 and bit 0 set uxBitsToClear to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group before the specified bits were cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "#define BIT_0\t( 1 << 0 )"]
    #[doc = "#define BIT_4\t( 1 << 4 )"]
    #[doc = ""]
    #[doc = "void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = "{"]
    #[doc = "EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "uxBits = xEventGroupClearBits("]
    #[doc = "xEventGroup,\t// The event group being updated."]
    #[doc = "BIT_0 | BIT_4 );// The bits being cleared."]
    #[doc = ""]
    #[doc = "if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xEventGroupClearBits xEventGroupClearBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupClearBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = "<pre>"]
    #[doc = "EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Set bits within an event group."]
    #[doc = " This function cannot be called from an interrupt.  xEventGroupSetBitsFromISR()"]
    #[doc = " is a version that can be called from an interrupt."]
    #[doc = ""]
    #[doc = " Setting bits in an event group will automatically unblock tasks that are"]
    #[doc = " blocked waiting for the bits."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are to be set."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet A bitwise value that indicates the bit or bits to set."]
    #[doc = " For example, to set bit 3 only, set uxBitsToSet to 0x08.  To set bit 3"]
    #[doc = " and bit 0 set uxBitsToSet to 0x09."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time the call to"]
    #[doc = " xEventGroupSetBits() returns.  There are two reasons why the returned value"]
    #[doc = " might have the bits specified by the uxBitsToSet parameter cleared.  First,"]
    #[doc = " if setting a bit results in a task that was waiting for the bit leaving the"]
    #[doc = " blocked state then it is possible the bit will be cleared automatically"]
    #[doc = " (see the xClearBitOnExit parameter of xEventGroupWaitBits()).  Second, any"]
    #[doc = " unblocked (or otherwise Ready state) task that has a priority above that of"]
    #[doc = " the task that called xEventGroupSetBits() will execute and may change the"]
    #[doc = " event group value before the call to xEventGroupSetBits() returns."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "#define BIT_0\t( 1 << 0 )"]
    #[doc = "#define BIT_4\t( 1 << 4 )"]
    #[doc = ""]
    #[doc = "void aFunction( EventGroupHandle_t xEventGroup )"]
    #[doc = "{"]
    #[doc = "EventBits_t uxBits;"]
    #[doc = ""]
    #[doc = "uxBits = xEventGroupSetBits("]
    #[doc = "xEventGroup,\t// The event group being updated."]
    #[doc = "BIT_0 | BIT_4 );// The bits being set."]
    #[doc = ""]
    #[doc = "if( ( uxBits & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else if( ( uxBits & BIT_0 ) != 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else if( ( uxBits & BIT_4 ) != 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "else"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xEventGroupSetBits xEventGroupSetBits"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSetBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = "<pre>"]
    #[doc = "EventBits_t xEventGroupSync(\tEventGroupHandle_t xEventGroup,"]
    #[doc = "const EventBits_t uxBitsToSet,"]
    #[doc = "const EventBits_t uxBitsToWaitFor,"]
    #[doc = "TickType_t xTicksToWait );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Atomically set bits within an event group, then wait for a combination of"]
    #[doc = " bits to be set within the same event group.  This functionality is typically"]
    #[doc = " used to synchronise multiple tasks, where each task has to wait for the other"]
    #[doc = " tasks to reach a synchronisation point before proceeding."]
    #[doc = ""]
    #[doc = " This function cannot be used from an interrupt."]
    #[doc = ""]
    #[doc = " The function will return before its block time expires if the bits specified"]
    #[doc = " by the uxBitsToWait parameter are set, or become set within that time.  In"]
    #[doc = " this case all the bits specified by uxBitsToWait will be automatically"]
    #[doc = " cleared before the function returns."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group in which the bits are being tested.  The"]
    #[doc = " event group must have previously been created using a call to"]
    #[doc = " xEventGroupCreate()."]
    #[doc = ""]
    #[doc = " @param uxBitsToSet The bits to set in the event group before determining"]
    #[doc = " if, and possibly waiting for, all the bits specified by the uxBitsToWait"]
    #[doc = " parameter are set."]
    #[doc = ""]
    #[doc = " @param uxBitsToWaitFor A bitwise value that indicates the bit or bits to test"]
    #[doc = " inside the event group.  For example, to wait for bit 0 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x05.  To wait for bits 0 and bit 1 and bit 2 set"]
    #[doc = " uxBitsToWaitFor to 0x07.  Etc."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time (specified in 'ticks') to wait"]
    #[doc = " for all of the bits specified by uxBitsToWaitFor to become set."]
    #[doc = ""]
    #[doc = " @return The value of the event group at the time either the bits being waited"]
    #[doc = " for became set, or the block time expired.  Test the return value to know"]
    #[doc = " which bits were set.  If xEventGroupSync() returned because its timeout"]
    #[doc = " expired then not all the bits being waited for will be set.  If"]
    #[doc = " xEventGroupSync() returned because all the bits it was waiting for were"]
    #[doc = " set then the returned value is the event group value before any bits were"]
    #[doc = " automatically cleared."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "#define TASK_0_BIT\t\t( 1 << 0 )"]
    #[doc = "#define TASK_1_BIT\t\t( 1 << 1 )"]
    #[doc = "#define TASK_2_BIT\t\t( 1 << 2 )"]
    #[doc = ""]
    #[doc = "#define ALL_SYNC_BITS ( TASK_0_BIT | TASK_1_BIT | TASK_2_BIT )"]
    #[doc = ""]
    #[doc = "EventGroupHandle_t xEventBits;"]
    #[doc = ""]
    #[doc = "void vTask0( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "EventBits_t uxReturn;"]
    #[doc = "TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = ""]
    #[doc = "uxReturn = xEventGroupSync( xEventBits, TASK_0_BIT, ALL_SYNC_BITS, xTicksToWait );"]
    #[doc = ""]
    #[doc = "if( ( uxReturn & ALL_SYNC_BITS ) == ALL_SYNC_BITS )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vTask1( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = ""]
    #[doc = "xEventGroupSync( xEventBits, TASK_1_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vTask2( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "for( ;; )"]
    #[doc = "{"]
    #[doc = ""]
    #[doc = "xEventGroupSync( xEventBits, TASK_2_BIT, ALL_SYNC_BITS, portMAX_DELAY );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xEventGroupSync xEventGroupSync"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupSync(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        uxBitsToWaitFor: EventBits_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = "<pre>"]
    #[doc = "EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " A version of xEventGroupGetBits() that can be called from an ISR."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being queried."]
    #[doc = ""]
    #[doc = " @return The event group bits at the time xEventGroupGetBitsFromISR() was called."]
    #[doc = ""]
    #[doc = " \\defgroup xEventGroupGetBitsFromISR xEventGroupGetBitsFromISR"]
    #[doc = " \\ingroup EventGroup"]
    pub fn xEventGroupGetBitsFromISR(xEventGroup: EventGroupHandle_t) -> EventBits_t;
}
extern "C" {
    #[doc = " event_groups.h"]
    #[doc = "<pre>"]
    #[doc = "void xEventGroupDelete( EventGroupHandle_t xEventGroup );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Delete an event group that was previously created by a call to"]
    #[doc = " xEventGroupCreate().  Tasks that are blocked on the event group will be"]
    #[doc = " unblocked and obtain 0 as the event group's value."]
    #[doc = ""]
    #[doc = " @param xEventGroup The event group being deleted."]
    pub fn vEventGroupDelete(xEventGroup: EventGroupHandle_t);
}
extern "C" {
    pub fn vEventGroupSetBitsCallback(pvEventGroup: *mut c_types::c_void, ulBitsToSet: u32);
}
extern "C" {
    pub fn vEventGroupClearBitsCallback(pvEventGroup: *mut c_types::c_void, ulBitsToClear: u32);
}
#[doc = " Type by which stream buffers are referenced.  For example, a call to"]
#[doc = " xStreamBufferCreate() returns an StreamBufferHandle_t variable that can"]
#[doc = " then be used as a parameter to xStreamBufferSend(), xStreamBufferReceive(),"]
#[doc = " etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StreamBufferDef_t {
    _unused: [u8; 0],
}
pub type StreamBufferHandle_t = *mut StreamBufferDef_t;
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,"]
    #[doc = "const void *pvTxData,"]
    #[doc = "size_t xDataLengthBytes,"]
    #[doc = "TickType_t xTicksToWait );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Sends bytes to a stream buffer.  The bytes are copied into the stream buffer."]
    #[doc = ""]
    #[doc = " ***NOTE***:  Uniquely among FreeRTOS objects, the stream buffer"]
    #[doc = " implementation (so also the message buffer implementation, as message buffers"]
    #[doc = " are built on top of stream buffers) assumes there is only one task or"]
    #[doc = " interrupt that will write to the buffer (the writer), and only one task or"]
    #[doc = " interrupt that will read from the buffer (the reader).  It is safe for the"]
    #[doc = " writer and reader to be different tasks or interrupts, but, unlike other"]
    #[doc = " FreeRTOS objects, it is not safe to have multiple different writers or"]
    #[doc = " multiple different readers.  If there are to be multiple different writers"]
    #[doc = " then the application writer must place each call to a writing API function"]
    #[doc = " (such as xStreamBufferSend()) inside a critical section and set the send"]
    #[doc = " block time to 0.  Likewise, if there are to be multiple different readers"]
    #[doc = " then the application writer must place each call to a reading API function"]
    #[doc = " (such as xStreamBufferRead()) inside a critical section and set the receive"]
    #[doc = " block time to 0."]
    #[doc = ""]
    #[doc = " Use xStreamBufferSend() to write to a stream buffer from a task.  Use"]
    #[doc = " xStreamBufferSendFromISR() to write to a stream buffer from an interrupt"]
    #[doc = " service routine (ISR)."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer to which a stream is"]
    #[doc = " being sent."]
    #[doc = ""]
    #[doc = " @param pvTxData A pointer to the buffer that holds the bytes to be copied"]
    #[doc = " into the stream buffer."]
    #[doc = ""]
    #[doc = " @param xDataLengthBytes   The maximum number of bytes to copy from pvTxData"]
    #[doc = " into the stream buffer."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should remain in the"]
    #[doc = " Blocked state to wait for enough space to become available in the stream"]
    #[doc = " buffer, should the stream buffer contain too little space to hold the"]
    #[doc = " another xDataLengthBytes bytes.  The block time is specified in tick periods,"]
    #[doc = " so the absolute time it represents is dependent on the tick frequency.  The"]
    #[doc = " macro pdMS_TO_TICKS() can be used to convert a time specified in milliseconds"]
    #[doc = " into a time specified in ticks.  Setting xTicksToWait to portMAX_DELAY will"]
    #[doc = " cause the task to wait indefinitely (without timing out), provided"]
    #[doc = " INCLUDE_vTaskSuspend is set to 1 in FreeRTOSConfig.h.  If a task times out"]
    #[doc = " before it can write all xDataLengthBytes into the buffer it will still write"]
    #[doc = " as many bytes as possible.  A task does not use any CPU time when it is in"]
    #[doc = " the blocked state."]
    #[doc = ""]
    #[doc = " @return The number of bytes written to the stream buffer.  If a task times"]
    #[doc = " out before it can write all xDataLengthBytes into the buffer it will still"]
    #[doc = " write as many bytes as possible."]
    #[doc = ""]
    #[doc = " Example use:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( StreamBufferHandle_t xStreamBuffer )"]
    #[doc = "{"]
    #[doc = "size_t xBytesSent;"]
    #[doc = "uint8_t ucArrayToSend[] = { 0, 1, 2, 3 };"]
    #[doc = "char *pcStringToSend = \"String to send\";"]
    #[doc = "const TickType_t x100ms = pdMS_TO_TICKS( 100 );"]
    #[doc = ""]
    #[doc = "xBytesSent = xStreamBufferSend( xStreamBuffer, ( void * ) ucArrayToSend, sizeof( ucArrayToSend ), x100ms );"]
    #[doc = ""]
    #[doc = "if( xBytesSent != sizeof( ucArrayToSend ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "xBytesSent = xStreamBufferSend( xStreamBuffer, ( void * ) pcStringToSend, strlen( pcStringToSend ), 0 );"]
    #[doc = ""]
    #[doc = "if( xBytesSent != strlen( pcStringToSend ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xStreamBufferSend xStreamBufferSend"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferSend(
        xStreamBuffer: StreamBufferHandle_t,
        pvTxData: *const c_types::c_void,
        xDataLengthBytes: usize,
        xTicksToWait: TickType_t,
    ) -> usize;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,"]
    #[doc = "const void *pvTxData,"]
    #[doc = "size_t xDataLengthBytes,"]
    #[doc = "BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Interrupt safe version of the API function that sends a stream of bytes to"]
    #[doc = " the stream buffer."]
    #[doc = ""]
    #[doc = " ***NOTE***:  Uniquely among FreeRTOS objects, the stream buffer"]
    #[doc = " implementation (so also the message buffer implementation, as message buffers"]
    #[doc = " are built on top of stream buffers) assumes there is only one task or"]
    #[doc = " interrupt that will write to the buffer (the writer), and only one task or"]
    #[doc = " interrupt that will read from the buffer (the reader).  It is safe for the"]
    #[doc = " writer and reader to be different tasks or interrupts, but, unlike other"]
    #[doc = " FreeRTOS objects, it is not safe to have multiple different writers or"]
    #[doc = " multiple different readers.  If there are to be multiple different writers"]
    #[doc = " then the application writer must place each call to a writing API function"]
    #[doc = " (such as xStreamBufferSend()) inside a critical section and set the send"]
    #[doc = " block time to 0.  Likewise, if there are to be multiple different readers"]
    #[doc = " then the application writer must place each call to a reading API function"]
    #[doc = " (such as xStreamBufferRead()) inside a critical section and set the receive"]
    #[doc = " block time to 0."]
    #[doc = ""]
    #[doc = " Use xStreamBufferSend() to write to a stream buffer from a task.  Use"]
    #[doc = " xStreamBufferSendFromISR() to write to a stream buffer from an interrupt"]
    #[doc = " service routine (ISR)."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer to which a stream is"]
    #[doc = " being sent."]
    #[doc = ""]
    #[doc = " @param pvTxData A pointer to the data that is to be copied into the stream"]
    #[doc = " buffer."]
    #[doc = ""]
    #[doc = " @param xDataLengthBytes The maximum number of bytes to copy from pvTxData"]
    #[doc = " into the stream buffer."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  It is possible that a stream buffer will"]
    #[doc = " have a task blocked on it waiting for data.  Calling"]
    #[doc = " xStreamBufferSendFromISR() can make data available, and so cause a task that"]
    #[doc = " was waiting for data to leave the Blocked state.  If calling"]
    #[doc = " xStreamBufferSendFromISR() causes a task to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently executing task (the"]
    #[doc = " task that was interrupted), then, internally, xStreamBufferSendFromISR()"]
    #[doc = " will set *pxHigherPriorityTaskWoken to pdTRUE.  If"]
    #[doc = " xStreamBufferSendFromISR() sets this value to pdTRUE, then normally a"]
    #[doc = " context switch should be performed before the interrupt is exited.  This will"]
    #[doc = " ensure that the interrupt returns directly to the highest priority Ready"]
    #[doc = " state task.  *pxHigherPriorityTaskWoken should be set to pdFALSE before it"]
    #[doc = " is passed into the function.  See the example code below for an example."]
    #[doc = ""]
    #[doc = " @return The number of bytes actually written to the stream buffer, which will"]
    #[doc = " be less than xDataLengthBytes if the stream buffer didn't have enough free"]
    #[doc = " space for all the bytes to be written."]
    #[doc = ""]
    #[doc = " Example use:"]
    #[doc = "<pre>"]
    #[doc = "StreamBufferHandle_t xStreamBuffer;"]
    #[doc = ""]
    #[doc = "void vAnInterruptServiceRoutine( void )"]
    #[doc = "{"]
    #[doc = "size_t xBytesSent;"]
    #[doc = "char *pcStringToSend = \"String to send\";"]
    #[doc = "BaseType_t xHigherPriorityTaskWoken = pdFALSE; // Initialised to pdFALSE."]
    #[doc = ""]
    #[doc = "xBytesSent = xStreamBufferSendFromISR( xStreamBuffer,"]
    #[doc = "( void * ) pcStringToSend,"]
    #[doc = "strlen( pcStringToSend ),"]
    #[doc = "&xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "if( xBytesSent != strlen( pcStringToSend ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "taskYIELD_FROM_ISR( xHigherPriorityTaskWoken );"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xStreamBufferSendFromISR xStreamBufferSendFromISR"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferSendFromISR(
        xStreamBuffer: StreamBufferHandle_t,
        pvTxData: *const c_types::c_void,
        xDataLengthBytes: usize,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> usize;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,"]
    #[doc = "void *pvRxData,"]
    #[doc = "size_t xBufferLengthBytes,"]
    #[doc = "TickType_t xTicksToWait );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Receives bytes from a stream buffer."]
    #[doc = ""]
    #[doc = " ***NOTE***:  Uniquely among FreeRTOS objects, the stream buffer"]
    #[doc = " implementation (so also the message buffer implementation, as message buffers"]
    #[doc = " are built on top of stream buffers) assumes there is only one task or"]
    #[doc = " interrupt that will write to the buffer (the writer), and only one task or"]
    #[doc = " interrupt that will read from the buffer (the reader).  It is safe for the"]
    #[doc = " writer and reader to be different tasks or interrupts, but, unlike other"]
    #[doc = " FreeRTOS objects, it is not safe to have multiple different writers or"]
    #[doc = " multiple different readers.  If there are to be multiple different writers"]
    #[doc = " then the application writer must place each call to a writing API function"]
    #[doc = " (such as xStreamBufferSend()) inside a critical section and set the send"]
    #[doc = " block time to 0.  Likewise, if there are to be multiple different readers"]
    #[doc = " then the application writer must place each call to a reading API function"]
    #[doc = " (such as xStreamBufferRead()) inside a critical section and set the receive"]
    #[doc = " block time to 0."]
    #[doc = ""]
    #[doc = " Use xStreamBufferReceive() to read from a stream buffer from a task.  Use"]
    #[doc = " xStreamBufferReceiveFromISR() to read from a stream buffer from an"]
    #[doc = " interrupt service routine (ISR)."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer from which bytes are to"]
    #[doc = " be received."]
    #[doc = ""]
    #[doc = " @param pvRxData A pointer to the buffer into which the received bytes will be"]
    #[doc = " copied."]
    #[doc = ""]
    #[doc = " @param xBufferLengthBytes The length of the buffer pointed to by the"]
    #[doc = " pvRxData parameter.  This sets the maximum number of bytes to receive in one"]
    #[doc = " call.  xStreamBufferReceive will return as many bytes as possible up to a"]
    #[doc = " maximum set by xBufferLengthBytes."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should remain in the"]
    #[doc = " Blocked state to wait for data to become available if the stream buffer is"]
    #[doc = " empty.  xStreamBufferReceive() will return immediately if xTicksToWait is"]
    #[doc = " zero.  The block time is specified in tick periods, so the absolute time it"]
    #[doc = " represents is dependent on the tick frequency.  The macro pdMS_TO_TICKS() can"]
    #[doc = " be used to convert a time specified in milliseconds into a time specified in"]
    #[doc = " ticks.  Setting xTicksToWait to portMAX_DELAY will cause the task to wait"]
    #[doc = " indefinitely (without timing out), provided INCLUDE_vTaskSuspend is set to 1"]
    #[doc = " in FreeRTOSConfig.h.  A task does not use any CPU time when it is in the"]
    #[doc = " Blocked state."]
    #[doc = ""]
    #[doc = " @return The number of bytes actually read from the stream buffer, which will"]
    #[doc = " be less than xBufferLengthBytes if the call to xStreamBufferReceive() timed"]
    #[doc = " out before xBufferLengthBytes were available."]
    #[doc = ""]
    #[doc = " Example use:"]
    #[doc = "<pre>"]
    #[doc = "void vAFunction( StreamBuffer_t xStreamBuffer )"]
    #[doc = "{"]
    #[doc = "uint8_t ucRxData[ 20 ];"]
    #[doc = "size_t xReceivedBytes;"]
    #[doc = "const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );"]
    #[doc = ""]
    #[doc = "xReceivedBytes = xStreamBufferReceive( xStreamBuffer,"]
    #[doc = "( void * ) ucRxData,"]
    #[doc = "sizeof( ucRxData ),"]
    #[doc = "xBlockTime );"]
    #[doc = ""]
    #[doc = "if( xReceivedBytes > 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xStreamBufferReceive xStreamBufferReceive"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferReceive(
        xStreamBuffer: StreamBufferHandle_t,
        pvRxData: *mut c_types::c_void,
        xBufferLengthBytes: usize,
        xTicksToWait: TickType_t,
    ) -> usize;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,"]
    #[doc = "void *pvRxData,"]
    #[doc = "size_t xBufferLengthBytes,"]
    #[doc = "BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " An interrupt safe version of the API function that receives bytes from a"]
    #[doc = " stream buffer."]
    #[doc = ""]
    #[doc = " Use xStreamBufferReceive() to read bytes from a stream buffer from a task."]
    #[doc = " Use xStreamBufferReceiveFromISR() to read bytes from a stream buffer from an"]
    #[doc = " interrupt service routine (ISR)."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer from which a stream"]
    #[doc = " is being received."]
    #[doc = ""]
    #[doc = " @param pvRxData A pointer to the buffer into which the received bytes are"]
    #[doc = " copied."]
    #[doc = ""]
    #[doc = " @param xBufferLengthBytes The length of the buffer pointed to by the"]
    #[doc = " pvRxData parameter.  This sets the maximum number of bytes to receive in one"]
    #[doc = " call.  xStreamBufferReceive will return as many bytes as possible up to a"]
    #[doc = " maximum set by xBufferLengthBytes."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  It is possible that a stream buffer will"]
    #[doc = " have a task blocked on it waiting for space to become available.  Calling"]
    #[doc = " xStreamBufferReceiveFromISR() can make space available, and so cause a task"]
    #[doc = " that is waiting for space to leave the Blocked state.  If calling"]
    #[doc = " xStreamBufferReceiveFromISR() causes a task to leave the Blocked state, and"]
    #[doc = " the unblocked task has a priority higher than the currently executing task"]
    #[doc = " (the task that was interrupted), then, internally,"]
    #[doc = " xStreamBufferReceiveFromISR() will set *pxHigherPriorityTaskWoken to pdTRUE."]
    #[doc = " If xStreamBufferReceiveFromISR() sets this value to pdTRUE, then normally a"]
    #[doc = " context switch should be performed before the interrupt is exited.  That will"]
    #[doc = " ensure the interrupt returns directly to the highest priority Ready state"]
    #[doc = " task.  *pxHigherPriorityTaskWoken should be set to pdFALSE before it is"]
    #[doc = " passed into the function.  See the code example below for an example."]
    #[doc = ""]
    #[doc = " @return The number of bytes read from the stream buffer, if any."]
    #[doc = ""]
    #[doc = " Example use:"]
    #[doc = "<pre>"]
    #[doc = "StreamBuffer_t xStreamBuffer;"]
    #[doc = ""]
    #[doc = "void vAnInterruptServiceRoutine( void )"]
    #[doc = "{"]
    #[doc = "uint8_t ucRxData[ 20 ];"]
    #[doc = "size_t xReceivedBytes;"]
    #[doc = "BaseType_t xHigherPriorityTaskWoken = pdFALSE;  // Initialised to pdFALSE."]
    #[doc = ""]
    #[doc = "xReceivedBytes = xStreamBufferReceiveFromISR( xStreamBuffer,"]
    #[doc = "( void * ) ucRxData,"]
    #[doc = "sizeof( ucRxData ),"]
    #[doc = "&xHigherPriorityTaskWoken );"]
    #[doc = ""]
    #[doc = "if( xReceivedBytes > 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "taskYIELD_FROM_ISR( xHigherPriorityTaskWoken );"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xStreamBufferReceiveFromISR xStreamBufferReceiveFromISR"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferReceiveFromISR(
        xStreamBuffer: StreamBufferHandle_t,
        pvRxData: *mut c_types::c_void,
        xBufferLengthBytes: usize,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> usize;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Deletes a stream buffer that was previously created using a call to"]
    #[doc = " xStreamBufferCreate() or xStreamBufferCreateStatic().  If the stream"]
    #[doc = " buffer was created using dynamic memory (that is, by xStreamBufferCreate()),"]
    #[doc = " then the allocated memory is freed."]
    #[doc = ""]
    #[doc = " A stream buffer handle must not be used after the stream buffer has been"]
    #[doc = " deleted."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer to be deleted."]
    #[doc = ""]
    #[doc = " \\defgroup vStreamBufferDelete vStreamBufferDelete"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn vStreamBufferDelete(xStreamBuffer: StreamBufferHandle_t);
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Queries a stream buffer to see if it is full.  A stream buffer is full if it"]
    #[doc = " does not have any free space, and therefore cannot accept any more data."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer being queried."]
    #[doc = ""]
    #[doc = " @return If the stream buffer is full then pdTRUE is returned.  Otherwise"]
    #[doc = " pdFALSE is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferIsFull xStreamBufferIsFull"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferIsFull(xStreamBuffer: StreamBufferHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Queries a stream buffer to see if it is empty.  A stream buffer is empty if"]
    #[doc = " it does not contain any data."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer being queried."]
    #[doc = ""]
    #[doc = " @return If the stream buffer is empty then pdTRUE is returned.  Otherwise"]
    #[doc = " pdFALSE is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferIsEmpty xStreamBufferIsEmpty"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferIsEmpty(xStreamBuffer: StreamBufferHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Resets a stream buffer to its initial, empty, state.  Any data that was in"]
    #[doc = " the stream buffer is discarded.  A stream buffer can only be reset if there"]
    #[doc = " are no tasks blocked waiting to either send to or receive from the stream"]
    #[doc = " buffer."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer being reset."]
    #[doc = ""]
    #[doc = " @return If the stream buffer is reset then pdPASS is returned.  If there was"]
    #[doc = " a task blocked waiting to send to or read from the stream buffer then the"]
    #[doc = " stream buffer is not reset and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferReset xStreamBufferReset"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferReset(xStreamBuffer: StreamBufferHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Queries a stream buffer to see how much free space it contains, which is"]
    #[doc = " equal to the amount of data that can be sent to the stream buffer before it"]
    #[doc = " is full."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer being queried."]
    #[doc = ""]
    #[doc = " @return The number of bytes that can be written to the stream buffer before"]
    #[doc = " the stream buffer would be full."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferSpacesAvailable xStreamBufferSpacesAvailable"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferSpacesAvailable(xStreamBuffer: StreamBufferHandle_t) -> usize;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " Queries a stream buffer to see how much data it contains, which is equal to"]
    #[doc = " the number of bytes that can be read from the stream buffer before the stream"]
    #[doc = " buffer would be empty."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer being queried."]
    #[doc = ""]
    #[doc = " @return The number of bytes that can be read from the stream buffer before"]
    #[doc = " the stream buffer would be empty."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferBytesAvailable xStreamBufferBytesAvailable"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferBytesAvailable(xStreamBuffer: StreamBufferHandle_t) -> usize;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " A stream buffer's trigger level is the number of bytes that must be in the"]
    #[doc = " stream buffer before a task that is blocked on the stream buffer to"]
    #[doc = " wait for data is moved out of the blocked state.  For example, if a task is"]
    #[doc = " blocked on a read of an empty stream buffer that has a trigger level of 1"]
    #[doc = " then the task will be unblocked when a single byte is written to the buffer"]
    #[doc = " or the task's block time expires.  As another example, if a task is blocked"]
    #[doc = " on a read of an empty stream buffer that has a trigger level of 10 then the"]
    #[doc = " task will not be unblocked until the stream buffer contains at least 10 bytes"]
    #[doc = " or the task's block time expires.  If a reading task's block time expires"]
    #[doc = " before the trigger level is reached then the task will still receive however"]
    #[doc = " many bytes are actually available.  Setting a trigger level of 0 will result"]
    #[doc = " in a trigger level of 1 being used.  It is not valid to specify a trigger"]
    #[doc = " level that is greater than the buffer size."]
    #[doc = ""]
    #[doc = " A trigger level is set when the stream buffer is created, and can be modified"]
    #[doc = " using xStreamBufferSetTriggerLevel()."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer being updated."]
    #[doc = ""]
    #[doc = " @param xTriggerLevel The new trigger level for the stream buffer."]
    #[doc = ""]
    #[doc = " @return If xTriggerLevel was less than or equal to the stream buffer's length"]
    #[doc = " then the trigger level will be updated and pdTRUE is returned.  Otherwise"]
    #[doc = " pdFALSE is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferSetTriggerLevel xStreamBufferSetTriggerLevel"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferSetTriggerLevel(
        xStreamBuffer: StreamBufferHandle_t,
        xTriggerLevel: usize,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " For advanced users only."]
    #[doc = ""]
    #[doc = " The sbSEND_COMPLETED() macro is called from within the FreeRTOS APIs when"]
    #[doc = " data is sent to a message buffer or stream buffer.  If there was a task that"]
    #[doc = " was blocked on the message or stream buffer waiting for data to arrive then"]
    #[doc = " the sbSEND_COMPLETED() macro sends a notification to the task to remove it"]
    #[doc = " from the Blocked state.  xStreamBufferSendCompletedFromISR() does the same"]
    #[doc = " thing.  It is provided to enable application writers to implement their own"]
    #[doc = " version of sbSEND_COMPLETED(), and MUST NOT BE USED AT ANY OTHER TIME."]
    #[doc = ""]
    #[doc = " See the example implemented in FreeRTOS/Demo/Minimal/MessageBufferAMP.c for"]
    #[doc = " additional information."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer to which data was"]
    #[doc = " written."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken *pxHigherPriorityTaskWoken should be"]
    #[doc = " initialised to pdFALSE before it is passed into"]
    #[doc = " xStreamBufferSendCompletedFromISR().  If calling"]
    #[doc = " xStreamBufferSendCompletedFromISR() removes a task from the Blocked state,"]
    #[doc = " and the task has a priority above the priority of the currently running task,"]
    #[doc = " then *pxHigherPriorityTaskWoken will get set to pdTRUE indicating that a"]
    #[doc = " context switch should be performed before exiting the ISR."]
    #[doc = ""]
    #[doc = " @return If a task was removed from the Blocked state then pdTRUE is returned."]
    #[doc = " Otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferSendCompletedFromISR xStreamBufferSendCompletedFromISR"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferSendCompletedFromISR(
        xStreamBuffer: StreamBufferHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " stream_buffer.h"]
    #[doc = ""]
    #[doc = "<pre>"]
    #[doc = "BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " For advanced users only."]
    #[doc = ""]
    #[doc = " The sbRECEIVE_COMPLETED() macro is called from within the FreeRTOS APIs when"]
    #[doc = " data is read out of a message buffer or stream buffer.  If there was a task"]
    #[doc = " that was blocked on the message or stream buffer waiting for data to arrive"]
    #[doc = " then the sbRECEIVE_COMPLETED() macro sends a notification to the task to"]
    #[doc = " remove it from the Blocked state.  xStreamBufferReceiveCompletedFromISR()"]
    #[doc = " does the same thing.  It is provided to enable application writers to"]
    #[doc = " implement their own version of sbRECEIVE_COMPLETED(), and MUST NOT BE USED AT"]
    #[doc = " ANY OTHER TIME."]
    #[doc = ""]
    #[doc = " See the example implemented in FreeRTOS/Demo/Minimal/MessageBufferAMP.c for"]
    #[doc = " additional information."]
    #[doc = ""]
    #[doc = " @param xStreamBuffer The handle of the stream buffer from which data was"]
    #[doc = " read."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken *pxHigherPriorityTaskWoken should be"]
    #[doc = " initialised to pdFALSE before it is passed into"]
    #[doc = " xStreamBufferReceiveCompletedFromISR().  If calling"]
    #[doc = " xStreamBufferReceiveCompletedFromISR() removes a task from the Blocked state,"]
    #[doc = " and the task has a priority above the priority of the currently running task,"]
    #[doc = " then *pxHigherPriorityTaskWoken will get set to pdTRUE indicating that a"]
    #[doc = " context switch should be performed before exiting the ISR."]
    #[doc = ""]
    #[doc = " @return If a task was removed from the Blocked state then pdTRUE is returned."]
    #[doc = " Otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " \\defgroup xStreamBufferReceiveCompletedFromISR xStreamBufferReceiveCompletedFromISR"]
    #[doc = " \\ingroup StreamBufferManagement"]
    pub fn xStreamBufferReceiveCompletedFromISR(
        xStreamBuffer: StreamBufferHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xStreamBufferGenericCreate(
        xBufferSizeBytes: usize,
        xTriggerLevelBytes: usize,
        xIsMessageBuffer: BaseType_t,
    ) -> StreamBufferHandle_t;
}
extern "C" {
    pub fn xStreamBufferGenericCreateStatic(
        xBufferSizeBytes: usize,
        xTriggerLevelBytes: usize,
        xIsMessageBuffer: BaseType_t,
        pucStreamBufferStorageArea: *mut u8,
        pxStaticStreamBuffer: *mut StaticStreamBuffer_t,
    ) -> StreamBufferHandle_t;
}
extern "C" {
    pub fn xStreamBufferNextMessageLengthBytes(xStreamBuffer: StreamBufferHandle_t) -> usize;
}
#[doc = " Type by which message buffers are referenced.  For example, a call to"]
#[doc = " xMessageBufferCreate() returns an MessageBufferHandle_t variable that can"]
#[doc = " then be used as a parameter to xMessageBufferSend(), xMessageBufferReceive(),"]
#[doc = " etc."]
pub type MessageBufferHandle_t = *mut c_types::c_void;
#[doc = " Type by which queues are referenced.  For example, a call to xQueueCreate()"]
#[doc = " returns an QueueHandle_t variable that can then be used as a parameter to"]
#[doc = " xQueueSend(), xQueueReceive(), etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    _unused: [u8; 0],
}
pub type QueueHandle_t = *mut QueueDefinition;
#[doc = " Type by which queue sets are referenced.  For example, a call to"]
#[doc = " xQueueCreateSet() returns an xQueueSet variable that can then be used as a"]
#[doc = " parameter to xQueueSelectFromSet(), xQueueAddToSet(), etc."]
pub type QueueSetHandle_t = *mut QueueDefinition;
#[doc = " Queue sets can contain both queues and semaphores, so the"]
#[doc = " QueueSetMemberHandle_t is defined as a type to be used where a parameter or"]
#[doc = " return value can be either an QueueHandle_t or an SemaphoreHandle_t."]
pub type QueueSetMemberHandle_t = *mut QueueDefinition;
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = "BaseType_t xQueueGenericSend("]
    #[doc = "QueueHandle_t xQueue,"]
    #[doc = "const void * pvItemToQueue,"]
    #[doc = "TickType_t xTicksToWait"]
    #[doc = "BaseType_t xCopyPosition"]
    #[doc = ");"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSend(), xQueueSendToFront() and"]
    #[doc = " xQueueSendToBack() are used in place of calling this function directly."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  The item is queued by copy, not by reference."]
    #[doc = " This function must not be called from an interrupt service routine."]
    #[doc = " See xQueueSendFromISR () for an alternative which may be used in an ISR."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for space to become available on the queue, should it already"]
    #[doc = " be full.  The call will return immediately if this is set to 0 and the"]
    #[doc = " queue is full.  The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "struct AMessage"]
    #[doc = "{"]
    #[doc = "char ucMessageID;"]
    #[doc = "char ucData[ 20 ];"]
    #[doc = "} xMessage;"]
    #[doc = ""]
    #[doc = "uint32_t ulVar = 10UL;"]
    #[doc = ""]
    #[doc = "void vATask( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "QueueHandle_t xQueue1, xQueue2;"]
    #[doc = "struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );"]
    #[doc = ""]
    #[doc = "xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "if( xQueue1 != 0 )"]
    #[doc = "{"]
    #[doc = "if( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "if( xQueue2 != 0 )"]
    #[doc = "{"]
    #[doc = "pxMessage = & xMessage;"]
    #[doc = "xQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xQueueSend xQueueSend"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        xTicksToWait: TickType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = "BaseType_t xQueuePeek("]
    #[doc = "QueueHandle_t xQueue,"]
    #[doc = "void * const pvBuffer,"]
    #[doc = "TickType_t xTicksToWait"]
    #[doc = ");</pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " This macro must not be used in an interrupt service routine.  See"]
    #[doc = " xQueuePeekFromISR() for an alternative that can be called from an interrupt"]
    #[doc = " service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call.\t The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = " xQueuePeek() will return immediately if xTicksToWait is 0 and the queue"]
    #[doc = " is empty."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "struct AMessage"]
    #[doc = "{"]
    #[doc = "char ucMessageID;"]
    #[doc = "char ucData[ 20 ];"]
    #[doc = "} xMessage;"]
    #[doc = ""]
    #[doc = "QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = "void vATask( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "if( xQueue == 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "pxMessage = & xMessage;"]
    #[doc = "xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vADifferentTask( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "if( xQueue != 0 )"]
    #[doc = "{"]
    #[doc = "if( xQueuePeek( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xQueuePeek xQueuePeek"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeek(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = "BaseType_t xQueuePeekFromISR("]
    #[doc = "QueueHandle_t xQueue,"]
    #[doc = "void *pvBuffer,"]
    #[doc = ");</pre>"]
    #[doc = ""]
    #[doc = " A version of xQueuePeek() that can be called from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xQueuePeekFromISR xQueuePeekFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeekFromISR(xQueue: QueueHandle_t, pvBuffer: *mut c_types::c_void) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = "BaseType_t xQueueReceive("]
    #[doc = "QueueHandle_t xQueue,"]
    #[doc = "void *pvBuffer,"]
    #[doc = "TickType_t xTicksToWait"]
    #[doc = ");</pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  The item is received by copy so a buffer of"]
    #[doc = " adequate size must be provided.  The number of bytes copied into the buffer"]
    #[doc = " was defined when the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items are removed from the queue."]
    #[doc = ""]
    #[doc = " This function must not be used in an interrupt service routine.  See"]
    #[doc = " xQueueReceiveFromISR for an alternative that can."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call.\t xQueueReceive() will return immediately if xTicksToWait"]
    #[doc = " is zero and the queue is empty.  The time is defined in tick periods so the"]
    #[doc = " constant portTICK_PERIOD_MS should be used to convert to real time if this is"]
    #[doc = " required."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = "struct AMessage"]
    #[doc = "{"]
    #[doc = "char ucMessageID;"]
    #[doc = "char ucData[ 20 ];"]
    #[doc = "} xMessage;"]
    #[doc = ""]
    #[doc = "QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = "void vATask( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "if( xQueue == 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "pxMessage = & xMessage;"]
    #[doc = "xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vADifferentTask( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "if( xQueue != 0 )"]
    #[doc = "{"]
    #[doc = "if( xQueueReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xQueueReceive xQueueReceive"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue );</pre>"]
    #[doc = ""]
    #[doc = " Return the number of messages stored in a queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of messages available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueMessagesWaiting(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue );</pre>"]
    #[doc = ""]
    #[doc = " Return the number of free spaces available in a queue.  This is equal to the"]
    #[doc = " number of items that can be sent to the queue before the queue becomes full"]
    #[doc = " if no items are removed."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of spaces available in the queue."]
    #[doc = ""]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueSpacesAvailable(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>void vQueueDelete( QueueHandle_t xQueue );</pre>"]
    #[doc = ""]
    #[doc = " Delete a queue - freeing all the memory allocated for storing of items"]
    #[doc = " placed on the queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue to be deleted."]
    #[doc = ""]
    #[doc = " \\defgroup vQueueDelete vQueueDelete"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn vQueueDelete(xQueue: QueueHandle_t);
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = "BaseType_t xQueueGenericSendFromISR("]
    #[doc = "QueueHandle_t\t\txQueue,"]
    #[doc = "const\tvoid\t*pvItemToQueue,"]
    #[doc = "BaseType_t\t*pxHigherPriorityTaskWoken,"]
    #[doc = "BaseType_t\txCopyPosition"]
    #[doc = ");"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSendFromISR(),"]
    #[doc = " xQueueSendToFrontFromISR() and xQueueSendToBackFromISR() be used in place"]
    #[doc = " of calling this function directly.  xQueueGiveFromISR() is an"]
    #[doc = " equivalent for use by semaphores that don't actually copy any data."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " Items are queued by copy not reference so it is preferable to only"]
    #[doc = " queue small items, especially when called from an ISR.  In most cases"]
    #[doc = " it would be preferable to store a pointer to the item being queued."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken xQueueGenericSendFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task"]
    #[doc = " to unblock, and the unblocked task has a priority higher than the currently"]
    #[doc = " running task.  If xQueueGenericSendFromISR() sets this value to pdTRUE then"]
    #[doc = " a context switch should be requested before the interrupt is exited."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the data was successfully sent to the queue, otherwise"]
    #[doc = " errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage for buffered IO (where the ISR can obtain more than one value"]
    #[doc = " per call):"]
    #[doc = "<pre>"]
    #[doc = "void vBufferISR( void )"]
    #[doc = "{"]
    #[doc = "char cIn;"]
    #[doc = "BaseType_t xHigherPriorityTaskWokenByPost;"]
    #[doc = ""]
    #[doc = "xHigherPriorityTaskWokenByPost = pdFALSE;"]
    #[doc = ""]
    #[doc = "do"]
    #[doc = "{"]
    #[doc = "cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );"]
    #[doc = ""]
    #[doc = "xQueueGenericSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );"]
    #[doc = ""]
    #[doc = "} while( portINPUT_BYTE( BUFFER_COUNT ) );"]
    #[doc = ""]
    #[doc = "if( xHigherPriorityTaskWokenByPost )"]
    #[doc = "{"]
    #[doc = "taskYIELD_YIELD_FROM_ISR();"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = ""]
    #[doc = " \\defgroup xQueueSendFromISR xQueueSendFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveFromISR(
        xQueue: QueueHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " queue. h"]
    #[doc = " <pre>"]
    #[doc = "BaseType_t xQueueReceiveFromISR("]
    #[doc = "QueueHandle_t\txQueue,"]
    #[doc = "void\t*pvBuffer,"]
    #[doc = "BaseType_t *pxTaskWoken"]
    #[doc = ");"]
    #[doc = " </pre>"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param pxTaskWoken A task may be blocked waiting for space to become"]
    #[doc = " available on the queue.  If xQueueReceiveFromISR causes such a task to"]
    #[doc = " unblock *pxTaskWoken will get set to pdTRUE, otherwise *pxTaskWoken will"]
    #[doc = " remain unchanged."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = "<pre>"]
    #[doc = ""]
    #[doc = "QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = "void vAFunction( void *pvParameters )"]
    #[doc = "{"]
    #[doc = "char cValueToPost;"]
    #[doc = "const TickType_t xTicksToWait = ( TickType_t )0xff;"]
    #[doc = ""]
    #[doc = "xQueue = xQueueCreate( 10, sizeof( char ) );"]
    #[doc = "if( xQueue == 0 )"]
    #[doc = "{"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "cValueToPost = 'a';"]
    #[doc = "xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = "cValueToPost = 'b';"]
    #[doc = "xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = ""]
    #[doc = ""]
    #[doc = "cValueToPost = 'c';"]
    #[doc = "xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "void vISR_Routine( void )"]
    #[doc = "{"]
    #[doc = "BaseType_t xTaskWokenByReceive = pdFALSE;"]
    #[doc = "char cRxedChar;"]
    #[doc = ""]
    #[doc = "while( xQueueReceiveFromISR( xQueue, ( void * ) &cRxedChar, &xTaskWokenByReceive) )"]
    #[doc = "{"]
    #[doc = "vOutputCharacter( cRxedChar );"]
    #[doc = ""]
    #[doc = "}"]
    #[doc = ""]
    #[doc = "if( cTaskWokenByPost != ( char ) pdFALSE;"]
    #[doc = "{"]
    #[doc = "taskYIELD ();"]
    #[doc = "}"]
    #[doc = "}"]
    #[doc = "</pre>"]
    #[doc = " \\defgroup xQueueReceiveFromISR xQueueReceiveFromISR"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueEmptyFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueFullFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueMessagesWaitingFromISR(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn xQueueCRSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        xCoRoutinePreviouslyWoken: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        pxTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCreateMutex(ucQueueType: u8) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateMutexStatic(
        ucQueueType: u8,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphore(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphoreStatic(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueSemaphoreTake(xQueue: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGetMutexHolder(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueGetMutexHolderFromISR(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueTakeMutexRecursive(xMutex: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveMutexRecursive(xMutex: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vQueueAddToRegistry(xQueue: QueueHandle_t, pcQueueName: *const c_types::c_char);
}
extern "C" {
    pub fn vQueueUnregisterQueue(xQueue: QueueHandle_t);
}
extern "C" {
    pub fn pcQueueGetName(xQueue: QueueHandle_t) -> *const c_types::c_char;
}
extern "C" {
    pub fn xQueueGenericCreate(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueGenericCreateStatic(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        pucQueueStorage: *mut u8,
        pxStaticQueue: *mut StaticQueue_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateSet(uxEventQueueLength: UBaseType_t) -> QueueSetHandle_t;
}
extern "C" {
    pub fn xQueueAddToSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueRemoveFromSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueSelectFromSet(
        xQueueSet: QueueSetHandle_t,
        xTicksToWait: TickType_t,
    ) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn xQueueSelectFromSetFromISR(xQueueSet: QueueSetHandle_t) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn vQueueWaitForMessageRestricted(
        xQueue: QueueHandle_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xQueueGenericReset(xQueue: QueueHandle_t, xNewQueue: BaseType_t) -> BaseType_t;
}
extern "C" {
    pub fn vQueueSetQueueNumber(xQueue: QueueHandle_t, uxQueueNumber: UBaseType_t);
}
extern "C" {
    pub fn uxQueueGetQueueNumber(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn ucQueueGetQueueType(xQueue: QueueHandle_t) -> u8;
}
pub type SemaphoreHandle_t = QueueHandle_t;
extern "C" {
    pub fn MPU_xTaskCreate(
        pxTaskCode: TaskFunction_t,
        pcName: *const c_types::c_char,
        usStackDepth: u16,
        pvParameters: *mut c_types::c_void,
        uxPriority: UBaseType_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTaskCreateStatic(
        pxTaskCode: TaskFunction_t,
        pcName: *const c_types::c_char,
        ulStackDepth: u32,
        pvParameters: *mut c_types::c_void,
        uxPriority: UBaseType_t,
        puxStackBuffer: *mut StackType_t,
        pxTaskBuffer: *mut StaticTask_t,
    ) -> TaskHandle_t;
}
extern "C" {
    pub fn MPU_xTaskCreateRestricted(
        pxTaskDefinition: *const TaskParameters_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTaskCreateRestrictedStatic(
        pxTaskDefinition: *const TaskParameters_t,
        pxCreatedTask: *mut TaskHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_vTaskAllocateMPURegions(xTask: TaskHandle_t, pxRegions: *const MemoryRegion_t);
}
extern "C" {
    pub fn MPU_vTaskDelete(xTaskToDelete: TaskHandle_t);
}
extern "C" {
    pub fn MPU_vTaskDelay(xTicksToDelay: TickType_t);
}
extern "C" {
    pub fn MPU_vTaskDelayUntil(pxPreviousWakeTime: *mut TickType_t, xTimeIncrement: TickType_t);
}
extern "C" {
    pub fn MPU_xTaskAbortDelay(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_uxTaskPriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn MPU_eTaskGetState(xTask: TaskHandle_t) -> eTaskState;
}
extern "C" {
    pub fn MPU_vTaskGetInfo(
        xTask: TaskHandle_t,
        pxTaskStatus: *mut TaskStatus_t,
        xGetFreeStackSpace: BaseType_t,
        eState: eTaskState,
    );
}
extern "C" {
    pub fn MPU_vTaskPrioritySet(xTask: TaskHandle_t, uxNewPriority: UBaseType_t);
}
extern "C" {
    pub fn MPU_vTaskSuspend(xTaskToSuspend: TaskHandle_t);
}
extern "C" {
    pub fn MPU_vTaskResume(xTaskToResume: TaskHandle_t);
}
extern "C" {
    pub fn MPU_vTaskStartScheduler();
}
extern "C" {
    pub fn MPU_vTaskSuspendAll();
}
extern "C" {
    pub fn MPU_xTaskResumeAll() -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTaskGetTickCount() -> TickType_t;
}
extern "C" {
    pub fn MPU_uxTaskGetNumberOfTasks() -> UBaseType_t;
}
extern "C" {
    pub fn MPU_pcTaskGetName(xTaskToQuery: TaskHandle_t) -> *mut c_types::c_char;
}
extern "C" {
    pub fn MPU_xTaskGetHandle(pcNameToQuery: *const c_types::c_char) -> TaskHandle_t;
}
extern "C" {
    pub fn MPU_uxTaskGetStackHighWaterMark(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn MPU_uxTaskGetStackHighWaterMark2(xTask: TaskHandle_t) -> u16;
}
extern "C" {
    pub fn MPU_vTaskSetApplicationTaskTag(xTask: TaskHandle_t, pxHookFunction: TaskHookFunction_t);
}
extern "C" {
    pub fn MPU_xTaskGetApplicationTaskTag(xTask: TaskHandle_t) -> TaskHookFunction_t;
}
extern "C" {
    pub fn MPU_vTaskSetThreadLocalStoragePointer(
        xTaskToSet: TaskHandle_t,
        xIndex: BaseType_t,
        pvValue: *mut c_types::c_void,
    );
}
extern "C" {
    pub fn MPU_pvTaskGetThreadLocalStoragePointer(
        xTaskToQuery: TaskHandle_t,
        xIndex: BaseType_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn MPU_xTaskCallApplicationTaskHook(
        xTask: TaskHandle_t,
        pvParameter: *mut c_types::c_void,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTaskGetIdleTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn MPU_uxTaskGetSystemState(
        pxTaskStatusArray: *mut TaskStatus_t,
        uxArraySize: UBaseType_t,
        pulTotalRunTime: *mut u32,
    ) -> UBaseType_t;
}
extern "C" {
    pub fn MPU_xTaskGetIdleRunTimeCounter() -> TickType_t;
}
extern "C" {
    pub fn MPU_vTaskList(pcWriteBuffer: *mut c_types::c_char);
}
extern "C" {
    pub fn MPU_vTaskGetRunTimeStats(pcWriteBuffer: *mut c_types::c_char);
}
extern "C" {
    pub fn MPU_xTaskGenericNotify(
        xTaskToNotify: TaskHandle_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTaskNotifyWait(
        ulBitsToClearOnEntry: u32,
        ulBitsToClearOnExit: u32,
        pulNotificationValue: *mut u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_ulTaskNotifyTake(xClearCountOnExit: BaseType_t, xTicksToWait: TickType_t) -> u32;
}
extern "C" {
    pub fn MPU_xTaskNotifyStateClear(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTaskIncrementTick() -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTaskGetCurrentTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn MPU_vTaskSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    pub fn MPU_xTaskCheckForTimeOut(
        pxTimeOut: *mut TimeOut_t,
        pxTicksToWait: *mut TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_vTaskMissedYield();
}
extern "C" {
    pub fn MPU_xTaskGetSchedulerState() -> BaseType_t;
}
extern "C" {
    pub fn MPU_xQueueGenericSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        xTicksToWait: TickType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xQueueReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xQueuePeek(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xQueueSemaphoreTake(xQueue: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_uxQueueMessagesWaiting(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn MPU_uxQueueSpacesAvailable(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn MPU_vQueueDelete(xQueue: QueueHandle_t);
}
extern "C" {
    pub fn MPU_xQueueCreateMutex(ucQueueType: u8) -> QueueHandle_t;
}
extern "C" {
    pub fn MPU_xQueueCreateMutexStatic(
        ucQueueType: u8,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn MPU_xQueueCreateCountingSemaphore(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn MPU_xQueueCreateCountingSemaphoreStatic(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn MPU_xQueueGetMutexHolder(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn MPU_xQueueTakeMutexRecursive(
        xMutex: QueueHandle_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xQueueGiveMutexRecursive(pxMutex: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_vQueueAddToRegistry(xQueue: QueueHandle_t, pcName: *const c_types::c_char);
}
extern "C" {
    pub fn MPU_vQueueUnregisterQueue(xQueue: QueueHandle_t);
}
extern "C" {
    pub fn MPU_pcQueueGetName(xQueue: QueueHandle_t) -> *const c_types::c_char;
}
extern "C" {
    pub fn MPU_xQueueGenericCreate(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn MPU_xQueueGenericCreateStatic(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        pucQueueStorage: *mut u8,
        pxStaticQueue: *mut StaticQueue_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn MPU_xQueueCreateSet(uxEventQueueLength: UBaseType_t) -> QueueSetHandle_t;
}
extern "C" {
    pub fn MPU_xQueueAddToSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xQueueRemoveFromSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xQueueSelectFromSet(
        xQueueSet: QueueSetHandle_t,
        xTicksToWait: TickType_t,
    ) -> QueueSetMemberHandle_t;
}
extern "C" {
    pub fn MPU_xQueueGenericReset(xQueue: QueueHandle_t, xNewQueue: BaseType_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_vQueueSetQueueNumber(xQueue: QueueHandle_t, uxQueueNumber: UBaseType_t);
}
extern "C" {
    pub fn MPU_uxQueueGetQueueNumber(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn MPU_ucQueueGetQueueType(xQueue: QueueHandle_t) -> u8;
}
extern "C" {
    pub fn MPU_xTimerCreate(
        pcTimerName: *const c_types::c_char,
        xTimerPeriodInTicks: TickType_t,
        uxAutoReload: UBaseType_t,
        pvTimerID: *mut c_types::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
    ) -> TimerHandle_t;
}
extern "C" {
    pub fn MPU_xTimerCreateStatic(
        pcTimerName: *const c_types::c_char,
        xTimerPeriodInTicks: TickType_t,
        uxAutoReload: UBaseType_t,
        pvTimerID: *mut c_types::c_void,
        pxCallbackFunction: TimerCallbackFunction_t,
        pxTimerBuffer: *mut StaticTimer_t,
    ) -> TimerHandle_t;
}
extern "C" {
    pub fn MPU_pvTimerGetTimerID(xTimer: TimerHandle_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn MPU_vTimerSetTimerID(xTimer: TimerHandle_t, pvNewID: *mut c_types::c_void);
}
extern "C" {
    pub fn MPU_xTimerIsTimerActive(xTimer: TimerHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTimerGetTimerDaemonTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn MPU_xTimerPendFunctionCall(
        xFunctionToPend: PendedFunction_t,
        pvParameter1: *mut c_types::c_void,
        ulParameter2: u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_pcTimerGetName(xTimer: TimerHandle_t) -> *const c_types::c_char;
}
extern "C" {
    pub fn MPU_vTimerSetReloadMode(xTimer: TimerHandle_t, uxAutoReload: UBaseType_t);
}
extern "C" {
    pub fn MPU_xTimerGetPeriod(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn MPU_xTimerGetExpiryTime(xTimer: TimerHandle_t) -> TickType_t;
}
extern "C" {
    pub fn MPU_xTimerCreateTimerTask() -> BaseType_t;
}
extern "C" {
    pub fn MPU_xTimerGenericCommand(
        xTimer: TimerHandle_t,
        xCommandID: BaseType_t,
        xOptionalValue: TickType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xEventGroupCreate() -> EventGroupHandle_t;
}
extern "C" {
    pub fn MPU_xEventGroupCreateStatic(
        pxEventGroupBuffer: *mut StaticEventGroup_t,
    ) -> EventGroupHandle_t;
}
extern "C" {
    pub fn MPU_xEventGroupWaitBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToWaitFor: EventBits_t,
        xClearOnExit: BaseType_t,
        xWaitForAllBits: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn MPU_xEventGroupClearBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToClear: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn MPU_xEventGroupSetBits(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn MPU_xEventGroupSync(
        xEventGroup: EventGroupHandle_t,
        uxBitsToSet: EventBits_t,
        uxBitsToWaitFor: EventBits_t,
        xTicksToWait: TickType_t,
    ) -> EventBits_t;
}
extern "C" {
    pub fn MPU_vEventGroupDelete(xEventGroup: EventGroupHandle_t);
}
extern "C" {
    pub fn MPU_uxEventGroupGetNumber(xEventGroup: *mut c_types::c_void) -> UBaseType_t;
}
extern "C" {
    pub fn MPU_xStreamBufferSend(
        xStreamBuffer: StreamBufferHandle_t,
        pvTxData: *const c_types::c_void,
        xDataLengthBytes: usize,
        xTicksToWait: TickType_t,
    ) -> usize;
}
extern "C" {
    pub fn MPU_xStreamBufferReceive(
        xStreamBuffer: StreamBufferHandle_t,
        pvRxData: *mut c_types::c_void,
        xBufferLengthBytes: usize,
        xTicksToWait: TickType_t,
    ) -> usize;
}
extern "C" {
    pub fn MPU_xStreamBufferNextMessageLengthBytes(xStreamBuffer: StreamBufferHandle_t) -> usize;
}
extern "C" {
    pub fn MPU_vStreamBufferDelete(xStreamBuffer: StreamBufferHandle_t);
}
extern "C" {
    pub fn MPU_xStreamBufferIsFull(xStreamBuffer: StreamBufferHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xStreamBufferIsEmpty(xStreamBuffer: StreamBufferHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xStreamBufferReset(xStreamBuffer: StreamBufferHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xStreamBufferSpacesAvailable(xStreamBuffer: StreamBufferHandle_t) -> usize;
}
extern "C" {
    pub fn MPU_xStreamBufferBytesAvailable(xStreamBuffer: StreamBufferHandle_t) -> usize;
}
extern "C" {
    pub fn MPU_xStreamBufferSetTriggerLevel(
        xStreamBuffer: StreamBufferHandle_t,
        xTriggerLevel: usize,
    ) -> BaseType_t;
}
extern "C" {
    pub fn MPU_xStreamBufferGenericCreate(
        xBufferSizeBytes: usize,
        xTriggerLevelBytes: usize,
        xIsMessageBuffer: BaseType_t,
    ) -> StreamBufferHandle_t;
}
extern "C" {
    pub fn MPU_xStreamBufferGenericCreateStatic(
        xBufferSizeBytes: usize,
        xTriggerLevelBytes: usize,
        xIsMessageBuffer: BaseType_t,
        pucStreamBufferStorageArea: *mut u8,
        pxStaticStreamBuffer: *mut StaticStreamBuffer_t,
    ) -> StreamBufferHandle_t;
}


pub mod c_types {
    pub type c_int = i32;
    pub type c_uint = u32;
    pub type c_ulong = u32;
    pub type c_ushort = u16;
    pub type c_short = i16;
    pub type c_schar = i8;
    pub type c_char = i8;
    pub type c_long = i32;
    pub type c_longlong = i64;
    pub type c_ulonglong = u64;
    pub enum c_void {}
}
